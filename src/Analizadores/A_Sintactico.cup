/*------------------------- 1ra Area: Codigo de Usuario -------------------------*/
package Analizadores;
import java_cup.runtime.Symbol;
import java.util.LinkedList;
import java.io.*;

//---> Codigo para el parser, variables, metodos.
parser code
{:  
     public static LinkedList<TError> TablaES = new LinkedList<TError>();
     public static LinkedList<String> python = new LinkedList<String>();

    // Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s){

        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        System.out.println("!!! Error Sintactico Recuperado");
        System.out.println("\t\tLexema: " + lexema);
        System.out.println("\t\tFila: " + fila);
        System.out.println("\t\tColumna: " + columna);

        TError datos = new TError(lexema ,"Error Sintactico" ,fila,columna);
        TablaES.add(datos);
    }

    // Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        System.out.println("!!! Error Sintactico, Panic Mode");
        System.out.println("\t\tLexema: " + lexema);
        System.out.println("\t\tFila: " + fila);
        System.out.println("\t\tColumna: " + columna);

        TError datos = new TError(lexema ,"Error Sintactico" ,fila,columna);
        TablaES.add(datos);
    }
:}

//--->
action code
{:
:}

/*------------------------- 2da Area: Declaraciones     -------------------------*/
//---> declaracion de terminales
terminal reservada_main, reservada_void, multi_comentario, comentario;
terminal punto_coma, Simbolo_mas,  Simbolo_menos, Simbolo_multi, Simbolo_divi;
terminal String reservada_int, reservada_string, reservada_double, reservada_char, reservada_bool, id, igual;
terminal String reservada_console, reservada_write, dot, open_pare, close_pare, string_literal;
terminal String numero;
terminal String reservada_if,reservada_else ,open_brace, close_brace;
terminal String mayor , menor, mayor_igual, menor_igual, igual_relacional, distinto;
terminal String and, or, not;
terminal String reservada_for, reservada_while, reservada_do;
terminal String reservada_switch, reservada_case, reservada_break, dos_puntos, reservada_default;

//---> declaracion de NO terminales
non terminal String INICIO; 
non terminal String PROGRAM, STMS, STMSLIST, MAIN, CMTS, CMT, PROGRAMS ; 
non terminal String E, ME, R, L ;   // Operadores para las expresiones
non terminal String DECLARATION_STMT, TIPOS_DATOS;
non terminal String PRINT_STMT, ARGS, ARG, IF_STM, IF_S0;
non terminal String FOR_STMT, UPDATE, WHILE_STMT, DO_STMT;
non terminal String SWITCH_STMT, CASE_STATEMENT, DEFAULT_CASE, CASE_LIST, ASIG;

//---> precedencia de menor a mayor
precedence left Simbolo_mas, Simbolo_menos;
precedence left Simbolo_multi, Simbolo_divi;
precedence left and, or, not;
precedence left mayor , menor, mayor_igual, menor_igual, igual_relacional, distinto;
start with INICIO;

/*------------------------- 3ra Area: Reglas Semanticas -------------------------*/

INICIO ::= PROGRAM;

PROGRAM ::= MAIN
    | MAIN CMTS
    | CMTS MAIN
    | CMTS MAIN CMTS
;

MAIN ::= reservada_void reservada_main open_pare close_pare open_brace STMSLIST:a close_brace 
    {:  
        python.add("def main (): \n" + a + "\nif__name__ = \"__main__\": \n main()" + "\n");:}
    ;

CMTS ::= CMTS CMT
    | CMT
    ;

CMT ::= multi_comentario
    | comentario
    ;

STMS::= PRINT_STMT:a        {: RESULT = (a); :}
    | DECLARATION_STMT:a    {: RESULT = (a); :}   
    | IF_STM:a              {: RESULT = (a); :}   
    | SWITCH_STMT:a         {: RESULT = (a); :}   
    | FOR_STMT:a            {: RESULT = (a); :}
    | WHILE_STMT:a          {: RESULT = (a); :}
    | DO_STMT:a             {: RESULT = (a); :}
    | ASIG:a                {: RESULT = (a); :}
    | CMT
    | L
    ;

// Makes it so it accepts any order of declarations and prints
STMSLIST ::= STMSLIST:a STMS:b {:RESULT = a + b ; :}
        | STMS:a               {:RESULT = a; :}   
;

//---> Declaracion y asignacion de variables
DECLARATION_STMT ::= TIPOS_DATOS id:a punto_coma          {: System.out.println("int " + a + " ; ");              RESULT = a+ "\n"; :}
                | TIPOS_DATOS id:a igual ME:b punto_coma  {: System.out.println("int " + a + " = " + b + ";");    RESULT = a + " = " + b + "\n"; :}
;

TIPOS_DATOS ::= reservada_int
    | reservada_string
    | reservada_double
    | reservada_char 
    | reservada_bool
    ;


ME ::= ME E:a {: RESULT = a; :}
    | E:a     {: RESULT = a; :}
    ;

E::=  E:a Simbolo_mas E:b   {: RESULT = a + " + " + b; :}
    | E:a Simbolo_menos E:b {: RESULT = a + " - " + b; :}
    | E:a Simbolo_multi E:b {: RESULT = a + " * " + b; :}
    | E:a Simbolo_divi E:b  {: RESULT = a + " / " + b; :}
    | numero:a              {: RESULT = a; :}
    ;

//---> Sentencias imprimir 
PRINT_STMT::= reservada_console dot reservada_write open_pare ARGS:a close_pare punto_coma {:System.out.println("print(" + a + ")" ); RESULT = "print(" + a + ")" + "\n"; :}
    ;

ARGS ::= ARGS ARG:a     {: RESULT = a; :}
    | ARG:a             {: RESULT = a; :}
    ;

ARG ::= ARG:a Simbolo_mas id:b                 {: RESULT = a + " , " + b; :}
    | ARG:a Simbolo_mas string_literal:b       {: RESULT = a + " , " + b; :}
    | id:a                                     {: RESULT = a; :}
    | string_literal:a                         {: RESULT = a; :}
    ;

//---> Sentencias IF
IF_STM ::= IF_S0:a                              {: RESULT = a; :}
        |  IF_S0:a  reservada_else IF_S0:b      {: RESULT = a +  "else " + b; :}
        ;
IF_S0 ::= reservada_if open_pare R:a close_pare open_brace STMSLIST:b close_brace {: RESULT = "if " + a  + " : " + " \n" + b; :}
    ;

//---> Operadores relacionales
R::=  R:a mayor R:b                 {: RESULT = a + " > " + b; :}
    | R:a menor R:b                 {: RESULT = a + " < " + b; :}
    | R:a mayor_igual R:b           {: RESULT = a + " >= " + b; :}
    | R:a menor_igual R:b           {: RESULT = a + " <= " + b; :}
    | R:a igual_relacional R:b      {: RESULT = a + " == " + b; :}
    | R:a distinto R:b              {: RESULT = a + " != " + b; :}
    | numero:a                      {: RESULT = a; :}
    | id:a                          {: RESULT = a; :}
    ;

//---> Operadores logicos
L::=  L:a and L:b                   {: RESULT = a + " && " + b; :}
    | L:a or L:b                    {: RESULT = a + " || " + b; :}
    | not L:a                       {: RESULT = " ! " + a; :}
    | numero:a                      {: RESULT = a; :}
    | id:a                          {: RESULT = a; :}
    ;

//---> Sentencias for
FOR_STMT ::= reservada_for open_pare reservada_int id:a igual numero:b punto_coma R:c punto_coma UPDATE close_pare open_brace STMSLIST:d close_brace
    
        {:
            int val1 = Integer.parseInt(b) + 1;                             // add 1 to the initial number
            String [] arrOfStr = c.split("< | > | <= | >= | == | != ", 0); // split array and get the last value
            RESULT = "for " + a + " in range(" + val1 + "," + arrOfStr[arrOfStr.length-1] + "):\n" + d ;
        :}
    ;

UPDATE ::= id Simbolo_mas Simbolo_mas
    ;

//---> Sentencias while
WHILE_STMT ::= reservada_while open_pare R:a close_pare open_brace STMSLIST:b close_brace
        {:RESULT = "while " +  a + " :\n" + b; :}
    ;

//---> Sentencias do while 
DO_STMT ::= reservada_do open_brace STMSLIST:a close_brace reservada_while open_pare R:b close_pare punto_coma
        {:RESULT = "while True:\n " + a + "if(" + b + "):\n"+ "break\n"; :}
    ;

//---> Sentencias SWITCH reservada_switch, reservada_case, reservada_break;
SWITCH_STMT ::= reservada_switch open_pare id:a close_pare open_brace CASE_LIST:b DEFAULT_CASE:c  close_brace
        {: RESULT = "def switch(case, " + a + "):\n" + "switcher = {\n" + b + c + "}"  ; :}
    ; 

CASE_LIST ::= CASE_LIST:a CASE_STATEMENT:b      {:RESULT = a + b; :}
        | CASE_STATEMENT:a                      {:RESULT = a; :}
        ;

CASE_STATEMENT ::= reservada_case numero:a dos_puntos STMSLIST:b reservada_break punto_coma     {:RESULT = a + " : " + b + ",\n"; :}
               | reservada_case numero:a dos_puntos STMSLIST:b                                  {:RESULT = a + " : " + b + ",\n"; :}
    ; 

DEFAULT_CASE ::= reservada_default dos_puntos STMSLIST:a      {: RESULT = "n : " + a ; :}
        ;


ASIG ::= id:a igual ME:b punto_coma
        {:RESULT = a + " = " + b ;:}
    ;


