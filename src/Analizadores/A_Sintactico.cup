/*------------------------- 1ra Area: Codigo de Usuario -------------------------*/
package Analizadores;
import java_cup.runtime.Symbol;
import java.util.LinkedList;
import java.io.*;
import java.util.Hashtable;
import java.util.Map;

//---> Codigo para el parser, variables, metodos.
parser code
{:  
    public static LinkedList<TError> TablaES = new LinkedList<TError>();
    public static LinkedList<String> python = new LinkedList<String>();

    // Listas para pie graph
    public static LinkedList<String> ejex_pie = new LinkedList<String>();
    public static LinkedList<String> valores_pie = new LinkedList<String>();
    public static String titulo_pie_graph="";
     
    // Listas para bar graph
    public static LinkedList<String> ejex_bar = new LinkedList<String>();
    public static LinkedList<String> valores_bar = new LinkedList<String>();
    public static String titulo_bar_graph="";
    public static String tituloX_bar="";
    public static String tituloY_bar="";

    // Variables globales statpy
    public static Hashtable<String, String> tabla_globales = new Hashtable<>();

    // Variable JSON
    public static Hashtable<String, LinkedList<Tokens>> json_data = new Hashtable<>();

    // variable de tabulacion
    int tab_n = 0;
    
//--------------------------------------------------------------------------------------------------

    public void test(Hashtable<String, LinkedList<Tokens>> tabla ){
        System.out.println("Holi");
        json_data = tabla;
        //System.out.println(json_data.get("archivo1.json"));
    }

//--------------------------------------------------------------------------------------------------
    public String indentation(int a){
        String tab="";
        for(int i = 0; i < a;i++ ){
            tab = tab + "\t";
        }
        
        return tab;
    }
//--------------------------------------------------------------------------------------------------

    // Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s){

        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        System.out.println("!!! Error Sintactico Recuperado");
        System.out.println("\t\tLexema: " + lexema);
        System.out.println("\t\tFila: " + fila);
        System.out.println("\t\tColumna: " + columna);

        TError datos = new TError(lexema ,"Error Sintactico" ,fila,columna);
        TablaES.add(datos);
    }

    // Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        System.out.println("!!! Error Sintactico, Panic Mode");
        System.out.println("\t\tLexema: " + lexema);
        System.out.println("\t\tFila: " + fila);
        System.out.println("\t\tColumna: " + columna);

        TError datos = new TError(lexema ,"Error Sintactico" ,fila,columna);
        TablaES.add(datos);
    }
:}

//--->
action code
{:
:}

/*------------------------- 2da Area: Declaraciones     -------------------------*/
//---> declaracion de terminales
terminal reservada_main, reservada_void, multi_comentario, comentario;
terminal punto_coma, Simbolo_mas,  Simbolo_menos, Simbolo_multi, Simbolo_divi;
terminal String reservada_int, reservada_string, reservada_double, reservada_char, reservada_bool, id, igual;
terminal String reservada_console, reservada_write, dot, open_pare, close_pare, string_literal;
terminal String numero;
terminal String reservada_if,reservada_else ,open_brace, close_brace;
terminal String mayor , menor, mayor_igual, menor_igual, igual_relacional, distinto;
terminal String and, or, not;
terminal String reservada_for, reservada_while, reservada_do;
terminal String reservada_switch, reservada_case, reservada_break, dos_puntos, reservada_default;
//---> funciones y graficas
terminal String reservada_graficapie, reservada_graficabarras;
terminal String reservada_titulo, reservada_ejex, reservada_valores, reservada_tituloy, reservada_titulox ;
terminal String open_square_brackets, close_square_brackets, coma;
terminal String reservada_definirglobales;
terminal String dollar, reservada_newvalor;

terminal INDENT, DEDENT;


//---> declaracion de NO terminales
non terminal String INICIO; 
non terminal String PROGRAM, STMS, STMSLIST, MAIN, CMTS, CMT ; 
non terminal String E, ME, R, L ;   // Operadores para las expresiones
non terminal String DECLARATION_STMT, TIPOS_DATOS;
non terminal String PRINT_STMT, ARGS, ARG, IF_STM, IF_S0;
non terminal String FOR_STMT, UPDATE, WHILE_STMT, DO_STMT;
non terminal String SWITCH_STMT, CASE_STATEMENT, DEFAULT_CASE, CASE_LIST, ASIG;
non terminal String G_PIE, STMS_PIE, TITULO_PIE, STMSLIST_PIE, EJEX, ARGS_EJEX, ARG_EJEX, DATO, VALOR, ARGS_VALOR, ARG_VALOR, DATO_VALOR;
non terminal String G_BAR, TITULO_BAR, EJEX_BAR, ARG_EJEX_BAR, DATO_BAR, ARGS_EJEX_BAR, VALOR_BAR, ARG_VALOR_BAR, DATO_VALOR_BAR, ARGS_VALOR_BAR, STMS_BAR, STMSLIST_BAR;
non terminal String DEF_GLOBAL, DEF_VAR, TD_DEF, VAL_DEF, DEF_LIST, TITULO_X, TITULO_Y;
non terminal String JSON_VAL;
non terminal String LST_STRING;
non terminal String LE;
non terminal String DECLA_LE,ELSE_IFSTM;

//---> precedencia de menor a mayor
precedence left Simbolo_mas, Simbolo_menos;
precedence left Simbolo_multi, Simbolo_divi;
precedence left mayor , menor, mayor_igual, menor_igual, igual_relacional, distinto;
precedence left and, or, not;
start with INICIO;

/*------------------------- 3ra Area: Reglas Semanticas -------------------------*/
INICIO ::= PROGRAM;

PROGRAM ::= MAIN
    | MAIN CMTS
    | CMTS MAIN
    | CMTS MAIN CMTS
;

MAIN ::= reservada_void reservada_main open_pare close_pare open_brace STMSLIST:a close_brace 
    {:  
        python.add("def main (): \n" + a + "\nif__name__ = \"__main__\": \n main()" + "\n"); tab_n--;:}
    ;

CMTS ::= CMTS CMT
    | CMT
    ;

CMT ::= multi_comentario
    | comentario
    ;

STMS::= PRINT_STMT:a        {: RESULT = (a); :}
    | DECLARATION_STMT:a    {: RESULT = (a); :}
    | DECLA_LE:a            {: RESULT = (a); :}
    | IF_STM:a              {: RESULT = (a); :}   
    | SWITCH_STMT:a         {: RESULT = (a); :}   
    | FOR_STMT:a            {: RESULT = (a); :}
    | WHILE_STMT:a          {: RESULT = (a); :}
    | DO_STMT:a             {: RESULT = (a); :}
    | ASIG:a                {: RESULT = (a); :}
    | CMT                   {: RESULT = ""; :}
    | G_PIE                 {: RESULT = ""; :}
    | G_BAR                 {: RESULT = ""; :}
    | DEF_GLOBAL            {: RESULT = ""; :}
    | error punto_coma      {::}
    ;

// Makes it so it accepts any order of declarations and prints
STMSLIST ::= STMSLIST:a STMS:b {:RESULT = a + b ; :}
        | STMS:a               {:RESULT = a; :}   
;

// test de indentation
STMS ::= INDENT STMS DEDENT
    ;

//---> Declaracion y asignacion de variables
DECLARATION_STMT ::= TIPOS_DATOS id:a punto_coma                        {: RESULT = a + " = None"+ "\n"; :}
                | TIPOS_DATOS id:a igual ME:b punto_coma                {: RESULT = a + " = " + b + "\n"; :}
                | TIPOS_DATOS id:a igual LST_STRING:b punto_coma        {: RESULT = a + " = " + b + "\n"; :}              
;

// Declaracion logica
DECLA_LE ::= reservada_bool id:a igual LE:b punto_coma                 {: RESULT = a + " = " + b + "\n"; :}                              
    ;

// Declaracion con string literales y ids
LST_STRING ::= LST_STRING Simbolo_mas string_literal:a          {: RESULT = " + " + a ; :} 
            |  LST_STRING Simbolo_mas id:a                      {: RESULT = " + " + a ; :}
            |  string_literal:a                                 {: RESULT = a; :}
    ;

TIPOS_DATOS ::= reservada_int
    | reservada_string
    | reservada_double
    | reservada_char 
    ;


ME ::= ME:a E:b {: RESULT = a + b; :}
    | E:a     {: RESULT = a; :}
    ;

E::=  E:a Simbolo_mas E:b   {: RESULT = a + " + " + b; :}
    | E:a Simbolo_menos E:b {: RESULT = a + " - " + b; :}
    | E:a Simbolo_multi E:b {: RESULT = a + " * " + b; :}
    | E:a Simbolo_divi E:b  {: RESULT = a + " / " + b; :}
    | numero:a              {: RESULT = a; :}
    | id:a                  {: RESULT = a; :}
    ;

//---> Sentencias imprimir 
PRINT_STMT::= reservada_console dot reservada_write open_pare ARGS:a close_pare punto_coma {: RESULT = "print(" + a + ")" + "\n"; :}
             //reservada_console dot reservada_write open_pare LE:a close_pare punto_coma {: RESULT = "print(" + a + ")" + "\n"; :}
    ;

ARGS ::= ARGS:a ARG:b     {: RESULT = a + b; :}
    | ARG:a               {: RESULT = a; :}
    ;

ARG ::= ARG:a Simbolo_mas id:b                 {: RESULT = a + " , " + b; :}
    | ARG:a Simbolo_mas string_literal:b       {: RESULT = a + " , " + b; :}
    | id:a Simbolo_mas string_literal:b        {: RESULT = a + " , " + b; :}
    //| id:a                                   {: RESULT = a; :}
    | string_literal:a                         {: RESULT = a; :}
      | E:a                                      {: RESULT = a; :}
    ;

//---> Sentencias IF
IF_STM ::= IF_S0:a                  {: RESULT =  a; :}
        |  IF_S0:a ELSE_IFSTM:b     {: RESULT =  a + b; :}
        ;

ELSE_IFSTM ::= ELSE_IFSTM:a reservada_else reservada_if open_pare LE:b close_pare open_brace STMSLIST:c close_brace  {: RESULT = a + "else if " + b + ":" + "\n" + c ;   :}
        |  reservada_else reservada_if open_pare LE:a close_pare open_brace STMSLIST:b close_brace                   {: RESULT = "else if " + a + ":" + "\n" + b ;   :} 
        |  reservada_else reservada_if open_pare LE:a close_pare open_brace close_brace                              {: RESULT = "else if " + a + ":" + "\n" ;   :} 
        ;

IF_S0 ::= reservada_if open_pare LE:a close_pare open_brace STMSLIST:b close_brace                  {: RESULT = "if " + a  + " : " + " \n" + b ; :}
        | reservada_if open_pare LE:a close_pare open_brace  close_brace                            {: RESULT = "if " + a  + " : " + " \n" ; :}
    ;

//---> Operadores relacionales
R::=  R:a mayor R:b                 {: RESULT = a + " > " + b; :}
    | R:a menor R:b                 {: RESULT = a + " < " + b; :}
    | R:a mayor_igual R:b           {: RESULT = a + " >= " + b; :}
    | R:a menor_igual R:b           {: RESULT = a + " <= " + b; :}
    | R:a igual_relacional R:b      {: RESULT = a + " == " + b; :}
    | R:a distinto R:b              {: RESULT = a + " != " + b; :}
    | numero:a                      {: RESULT = a; :}
    | id:a                          {: RESULT = a; :}
    | string_literal:a              {: RESULT = a; :}
    ;


//---> Operadores logicos
L::=  R:a and R:b                   {: RESULT = a + " && " + b; :}
    | R:a or R:b                    {: RESULT = a + " || " + b; :}
    | not R:a                       {: RESULT = " ! " + a; :}
    | R:a                           {: RESULT = a; :}
    | and R:a                       {: RESULT = " && " + a; :}
    | or  R:a                       {: RESULT = " || " + a; :}
    ;

LE ::= LE:a L:b     {: RESULT = a + b; :}
    | L:a           {: RESULT = a; :}
    ;

//---> Sentencias for
FOR_STMT ::= reservada_for open_pare reservada_int id:a igual numero:b punto_coma LE:c punto_coma UPDATE close_pare open_brace STMSLIST:d close_brace
    
        {:
            int val1 = Integer.parseInt(b) + 1;                             // add 1 to the initial number
            String [] arrOfStr = c.split("< | > | <= | >= | == | != ", 0); // split array and get the last value
            RESULT = "for " + a + " in range(" + val1 + "," + arrOfStr[arrOfStr.length-1] + "):\n" + d ;
        :}
    ;

UPDATE ::= id Simbolo_mas Simbolo_mas
    ;

//---> Sentencias while
WHILE_STMT ::= reservada_while open_pare LE:a close_pare open_brace STMSLIST:b close_brace
        {: RESULT = "while " +  a + " : \n" + b ; :}
    ;

//---> Sentencias do while 
DO_STMT ::= reservada_do open_brace STMSLIST:a close_brace reservada_while open_pare LE:b close_pare punto_coma
        {:RESULT = "while True:\n " + a + "if(" + b + "):\n"+ "break\n"; :}
    ;

//---> Sentencias SWITCH reservada_switch, reservada_case, reservada_break;
SWITCH_STMT ::= reservada_switch open_pare id:a close_pare open_brace CASE_LIST:b DEFAULT_CASE:c  close_brace
        {: RESULT = "def switch(case, " + a + "): \n" + "switcher = {\n" + b + c + "} \n"   ; :}
    ; 

CASE_LIST ::= CASE_LIST:a CASE_STATEMENT:b      {:RESULT = a + b; :}
        | CASE_STATEMENT:a                      {:RESULT = a; :}
        ;

CASE_STATEMENT ::= reservada_case numero:a dos_puntos STMSLIST:b reservada_break punto_coma             {: RESULT = a + " : " + b + ",\n"; :}
               |   reservada_case numero:a dos_puntos STMSLIST:b                                        {: RESULT = a + " : " + b + ",\n"; :}
               |   reservada_case string_literal:a dos_puntos STMSLIST:b reservada_break punto_coma     {: RESULT = a + " : " + b + ",\n"; :}
               |   reservada_case string_literal:a dos_puntos STMSLIST:b                                {: RESULT = a + " : " + b + ",\n"; :}
    ; 

DEFAULT_CASE ::= reservada_default dos_puntos STMSLIST:a reservada_break punto_coma                     {: RESULT = "n : " + a ; :}
               | reservada_default dos_puntos STMSLIST:a                                                {: RESULT = "n : " + a ; :}
        ;


ASIG ::= id:a igual ME:b punto_coma     {: RESULT = a + " = " + b + "\n"; :}
    ;

// ---> Gramaticas para funciones y grafica jfreechart titulo, ejex valores
// ---> Grafica Pie
G_PIE ::= reservada_void reservada_graficapie open_pare close_pare open_brace STMSLIST_PIE close_brace  {:System.out.println("una grafica pie");:}
    ;

TITULO_PIE ::= reservada_string reservada_titulo igual  string_literal:a punto_coma   {: titulo_pie_graph = a; :}        
        |  reservada_string reservada_titulo igual  id:a punto_coma                   
                    {:
                        if(tabla_globales.containsKey(a)){
                            String val = tabla_globales.get(a);
                            titulo_pie_graph = val;
                        }else {
                            System.out.println("ERROR: No se declaro la variable: " + a);
                        }
                    :}
        | reservada_string reservada_titulo igual  JSON_VAL:a punto_coma        {: titulo_pie_graph = a; :}
    ;
EJEX ::= reservada_string open_square_brackets close_square_brackets reservada_ejex igual open_brace ARGS_EJEX:a close_brace punto_coma 
        {: System.out.println(a); :}
    ;

ARG_EJEX ::= DATO:a coma        {: RESULT = a; ejex_pie.add(a); :}
    | id:a                      {: //RESULT = a; ejex_pie.add(a); 
                                    if(tabla_globales.containsKey(a)){
                                        String val = tabla_globales.get(a); ejex_pie.add(val); 
                                    }else {
                                        System.out.println("ERROR: No se declaro la variable: " + a);
                                    }
                                :}
    | string_literal:a          {: RESULT = a; ejex_pie.add(a); :}
    | JSON_VAL:a                {: RESULT = a; ejex_pie.add(a); :}
    ;
DATO ::= string_literal:a       {: RESULT = a; //ejex_pie.add(a); :}
    | id:a                      {: 
                                    if(tabla_globales.containsKey(a)){
                                        String val = tabla_globales.get(a); RESULT = val; 
                                    }else {
                                        System.out.println("ERROR: No se declaro la variable: " + a);
                                    }
                                :}
    | JSON_VAL:a                {: RESULT = a;  :} 
    ;
ARGS_EJEX ::= ARGS_EJEX:a ARG_EJEX:b    {: RESULT = a + b;  :}
    | ARG_EJEX:a                        {: RESULT = a;      :}
    ;

VALOR ::= reservada_double open_square_brackets close_square_brackets reservada_valores igual open_brace ARGS_VALOR:a close_brace punto_coma 
            {:System.out.println("var valor "); :}
    ;
ARG_VALOR ::= DATO_VALOR:a coma     {: RESULT = a; valores_pie.add(a); :} 
    | id:a                          {: //RESULT = a; valores_pie.add(a); 
                                        if(tabla_globales.containsKey(a)){
                                            String val = tabla_globales.get(a); valores_pie.add(val); 
                                        }else {
                                            System.out.println("ERROR: No se declaro la variable: " + a);
                                        }
                                    :}
    | numero:a                      {: RESULT = a; valores_pie.add(a); :}
    | JSON_VAL:a                    {: RESULT = a; valores_pie.add(a); :}
    ;
DATO_VALOR ::= numero:a             {: RESULT = a; :} 
    | id:a                          {: 
                                        if(tabla_globales.containsKey(a)){
                                            String val = tabla_globales.get(a); RESULT = val; 
                                        }else {
                                            System.out.println("ERROR: No se declaro la variable: " + a);
                                        }
                                    :}
    | JSON_VAL:a                    {: RESULT = a;  :} 
    ;
ARGS_VALOR ::= ARGS_VALOR:a ARG_VALOR:b     {: RESULT = a + b; :}
    | ARG_VALOR:a                           {: RESULT = a; :}            
    ;

STMS_PIE ::= TITULO_PIE
    | EJEX
    | VALOR
    ;

STMSLIST_PIE ::= STMSLIST_PIE STMS_PIE
        | STMS_PIE
    ;

// ---> Grafica barras
G_BAR ::= reservada_void reservada_graficabarras open_pare close_pare open_brace STMSLIST_BAR close_brace  {:System.out.println("--------- GRAFICA DE BARRAS ---------");:}
    ;
TITULO_BAR ::= reservada_string reservada_titulo igual  string_literal:a punto_coma     {: titulo_bar_graph = a; :}        
        |  reservada_string reservada_titulo igual  id:a punto_coma                       
                                        {:
                                            if(tabla_globales.containsKey(a)){
                                                String val = tabla_globales.get(a);
                                                titulo_bar_graph = val;
                                            }else {
                                                System.out.println("ERROR: No se declaro la variable: " + a);
                                            }
                                        :}
        | reservada_string reservada_titulo igual  JSON_VAL:a punto_coma        {: titulo_bar_graph = a; :}
        ;
TITULO_X ::= reservada_string reservada_titulox igual  string_literal:a punto_coma     {: tituloX_bar = a; :}        
        |    reservada_string reservada_titulox igual  id:a punto_coma                       
                                        {:
                                            if(tabla_globales.containsKey(a)){
                                                String val = tabla_globales.get(a);
                                                tituloX_bar = val;
                                            }else {
                                                System.out.println("ERROR: No se declaro la variable: " + a);
                                            }
                                        :}
        |    reservada_string reservada_titulox igual  JSON_VAL:a punto_coma    {: tituloX_bar = a; :}
        ;
TITULO_Y ::= reservada_string reservada_tituloy igual  string_literal:a punto_coma     {: tituloY_bar = a; :}        
        |    reservada_string reservada_tituloy igual  id:a punto_coma                       
                                        {:
                                            if(tabla_globales.containsKey(a)){
                                                String val = tabla_globales.get(a);
                                                tituloY_bar = val;
                                            }else {
                                                System.out.println("ERROR: No se declaro la variable: " + a);
                                            }
                                        :}
        | reservada_string reservada_tituloy igual  JSON_VAL:a punto_coma       {: tituloY_bar = a; :}        
        ;
EJEX_BAR ::= reservada_string open_square_brackets close_square_brackets reservada_ejex igual open_brace ARGS_EJEX_BAR:a close_brace punto_coma 
        {: //System.out.println(a); //ejex_bar.add(a); :}
    ;
ARG_EJEX_BAR ::= DATO_BAR:a coma        {: ejex_bar.add(a); :}
    | id:a                              {: 
                                            if(tabla_globales.containsKey(a)){
                                                String val = tabla_globales.get(a); ejex_bar.add(val); 
                                            }else {
                                                System.out.println("ERROR: No se declaro la variable: " + a);
                                            }
                                        :}
    | string_literal:a                  {: RESULT = a; ejex_bar.add(a); :}
    | JSON_VAL:a                        {: RESULT = a; ejex_bar.add(a); :} 
    ;
DATO_BAR ::= string_literal:a           {: RESULT = a; :}
    | id:a                              {:  
                                            if(tabla_globales.containsKey(a)){
                                                String val = tabla_globales.get(a); RESULT = val; 
                                            }else {
                                                System.out.println("ERROR: No se declaro la variable: " + a);
                                            }
                                        :}
    | JSON_VAL:a                        {: RESULT = a;  :} 
    ;
ARGS_EJEX_BAR ::= ARGS_EJEX_BAR ARG_EJEX_BAR
    | ARG_EJEX_BAR        
    ;

VALOR_BAR ::= reservada_double open_square_brackets close_square_brackets reservada_valores igual open_brace ARGS_VALOR_BAR:a close_brace punto_coma 
            {:System.out.println("var valor "); //valores_pie.add(a); :}
    ;
ARG_VALOR_BAR ::= DATO_VALOR_BAR:a coma         {: RESULT = a; valores_bar.add(a); :} 
    | id:a                                      {: //RESULT = a; valores_bar.add(a);
                                                    if(tabla_globales.containsKey(a)){
                                                        String val = tabla_globales.get(a); valores_bar.add(val); 
                                                    }else {
                                                        System.out.println("ERROR: No se declaro la variable: " + a);
                                                    }
                                                :} 
    | numero:a                                  {: RESULT = a; valores_bar.add(a); :}
    | JSON_VAL:a                                {: RESULT = a; valores_bar.add(a); :}
    ;

DATO_VALOR_BAR ::= numero:a                 {: RESULT = a;  :} 
    | id:a                                  {: 
                                                if(tabla_globales.containsKey(a)){
                                                    String val = tabla_globales.get(a); RESULT = val; 
                                                }else {
                                                    System.out.println("ERROR: No se declaro la variable: " + a);
                                                }
                                            :}
     | JSON_VAL:a                           {: RESULT = a;  :}                                       
    ;
ARGS_VALOR_BAR ::= ARGS_VALOR_BAR:a ARG_VALOR_BAR:b     {: RESULT = a + b; :}
    | ARG_VALOR_BAR:a                                   {: RESULT = a; :}            
    ;

STMS_BAR ::= TITULO_BAR
    | TITULO_X
    | TITULO_Y
    | EJEX_BAR
    | VALOR_BAR
    ;

STMSLIST_BAR ::= STMSLIST_BAR STMS_BAR
        | STMS_BAR
    ;

// ---> Definir Globales
DEF_GLOBAL ::= reservada_void reservada_definirglobales open_pare close_pare open_brace DEF_LIST close_brace  {:System.out.println("Metodo definir globales");:}
    ;

DEF_VAR ::= TD_DEF id:a igual VAL_DEF:b punto_coma  {: tabla_globales.put(a,b); :}
    ;

TD_DEF ::= reservada_string
    | reservada_double
    ;
VAL_DEF ::= string_literal:a            {: RESULT = a;  :} 
    | numero:a                          {: RESULT = a;  :}
    | JSON_VAL:a                        {: RESULT = a;  :}
    ;
DEF_LIST ::= DEF_LIST DEF_VAR
    | DEF_VAR
    ;

// Obtiene los dato cargados del JSOn
JSON_VAL ::= dollar open_brace reservada_newvalor coma string_literal:a coma string_literal:b close_brace 
                {: 
                    // split string to take off qoutes, " qoutes " [1]
                    String[] json_name = a.split("\"",5);
                    for(int i = 0; i < json_data.get(json_name[1]).size(); i++){
                        if(json_data.get(json_name[1]).get(i).getLexema().equals(b) ) {
                            System.out.println("FLAG: holi" );
                            String val = json_data.get(json_name[1]).get(i+2).getLexema();
                            System.out.println(json_data.get(json_name[1]).get(i+2).getLexema());
                            RESULT = val;
                            break;
                        }else{
                              System.out.println(a + "  NO EXISTE EN:  " + b );
                        }
                    }

                    
                :}
    ;

/*
JSON_VAL ::= dollar open_brace reservada_newvalor coma string_literal:a coma string_literal:b close_brace 
                {: 
                    // split string to take off qoutes, " qoutes " [1]
                    String[] json_name = a.split("\"",5);
                    for(int i = 0; i < json_data.get(json_name[1]).size(); i++){
                        if(json_data.get(json_name[1]).get(i).getLexema().equals(b) ) {
                            System.out.println("FLAG: holi" );
                            System.out.println(json_data.get(json_name[1]).get(i+2).getLexema());
                            break;
                        }
                    }

                    
                :}
    ;
*/