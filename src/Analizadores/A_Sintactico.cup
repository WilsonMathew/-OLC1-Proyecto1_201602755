/*------------------------- 1ra Area: Codigo de Usuario -------------------------*/
package Analizadores;
import java_cup.runtime.Symbol;
import java.util.LinkedList;
import java.io.*;

//---> Codigo para el parser, variables, metodos.
parser code
{:  
     public static LinkedList<TError> TablaES = new LinkedList<TError>();

    // Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s){

        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        System.out.println("!!! Error Sintactico Recuperado");
        System.out.println("\t\tLexema: " + lexema);
        System.out.println("\t\tFila: " + fila);
        System.out.println("\t\tColumna: " + columna);

        TError datos = new TError(lexema ,"Error Sintactico" ,fila,columna);
        TablaES.add(datos);
    }

    // Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        System.out.println("!!! Error Sintactico, Panic Mode");
        System.out.println("\t\tLexema: " + lexema);
        System.out.println("\t\tFila: " + fila);
        System.out.println("\t\tColumna: " + columna);

        TError datos = new TError(lexema ,"Error Sintactico" ,fila,columna);
        TablaES.add(datos);
    }
:}

//--->
action code
{:
:}

/*------------------------- 2da Area: Declaraciones     -------------------------*/
//---> declaracion de terminales
terminal punto_coma, Simbolo_mas,  Simbolo_menos, Simbolo_multi, Simbolo_divi;
terminal String reservada_int,id, igual;
terminal String reservada_console, open_pare, close_pare, string_literal;
terminal String numero;
terminal String reservada_if,reservada_else ,open_brace, close_brace;


//---> declaracion de NO terminales
non terminal String INICIO; 
non terminal String STMS, STMSLIST ; 
non terminal String E, ME, DECLARATION_STMTS, DECLARATION_STMT;
non terminal String PRINT_STMTS, PRINT_STMT, ARGS, ARG, IF_STM, IF_S0;

//---> precedencia de menor a mayor
precedence left Simbolo_mas, Simbolo_menos;
precedence left Simbolo_multi, Simbolo_divi;
start with INICIO;

/*------------------------- 3ra Area: Reglas Semanticas -------------------------*/

INICIO ::= STMSLIST;



STMS::= PRINT_STMT 
    | DECLARATION_STMT
    | IF_STM
;

// Makes it so it accepts any order of declarations and prints
STMSLIST ::= STMSLIST STMS
        | STMS
;

//---> Declaracion y asignacion de variables
/* Stand alone 
DECLARATION_STMTS ::= DECLARATION_STMTS DECLARATION_STMT
                | DECLARATION_STMT;
*/

DECLARATION_STMT ::= reservada_int id:a punto_coma          {: System.out.println("int " + a + " ; "); :}
                | reservada_int id:a igual ME:b punto_coma  {: System.out.println("int " + a + " = " + b + ";"); :}
;

ME ::= ME E:a {: RESULT = a; :}
    | E:a     {: RESULT = a; :}
    ;

E::=  E:a Simbolo_mas E:b   {: RESULT = a + " + " + b; :}
    | E:a Simbolo_menos E:b {: RESULT = a + " - " + b; :}
    | E:a Simbolo_multi E:b {: RESULT = a + " * " + b; :}
    | E:a Simbolo_divi E:b  {: RESULT = a + " / " + b; :}
    | numero:a              {: RESULT = a; :}
    ;

//---> Sentencias imprimir
/*
PRINT_STMTS::= PRINT_STMTS PRINT_STMT
            | PRINT_STMT
;
*/

PRINT_STMT::= reservada_console open_pare ARGS:a close_pare punto_coma {:System.out.println("print(" + a + ")" ); :}
;

ARGS ::= ARGS ARG:a     {: RESULT = a; :}
    | ARG:a             {: RESULT = a; :}
;

ARG ::= ARG:a Simbolo_mas id:b                 {: RESULT = a + " , " + b; :}
    | ARG:a Simbolo_mas string_literal:b       {: RESULT = a + " , " + b; :}
    | id:a                                     {: RESULT = a; :}
    | string_literal:a                         {: RESULT = a; :}
;

//---> Sentencias IF

IF_STM ::= IF_S0
        | IF_S0  reservada_else IF_S0  ;

IF_S0 ::= reservada_if open_pare id close_pare open_brace STMSLIST close_brace;