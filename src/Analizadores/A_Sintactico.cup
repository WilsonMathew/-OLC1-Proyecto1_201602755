/*------------------------- 1ra Area: Codigo de Usuario -------------------------*/
package Analizadores;
import java_cup.runtime.Symbol;
import java.util.LinkedList;
import java.io.*;

//---> Codigo para el parser, variables, metodos.
parser code
{:  
     public static LinkedList<TError> TablaES = new LinkedList<TError>();

    // Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s){

        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        System.out.println("!!! Error Sintactico Recuperado");
        System.out.println("\t\tLexema: " + lexema);
        System.out.println("\t\tFila: " + fila);
        System.out.println("\t\tColumna: " + columna);

        TError datos = new TError(lexema ,"Error Sintactico" ,fila,columna);
        TablaES.add(datos);
    }

    // Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        System.out.println("!!! Error Sintactico, Panic Mode");
        System.out.println("\t\tLexema: " + lexema);
        System.out.println("\t\tFila: " + fila);
        System.out.println("\t\tColumna: " + columna);

        TError datos = new TError(lexema ,"Error Sintactico" ,fila,columna);
        TablaES.add(datos);
    }
:}

//--->
action code
{:
:}

/*------------------------- 2da Area: Declaraciones     -------------------------*/
//---> declaracion de terminales
terminal punto_coma, Simbolo_mas,  Simbolo_menos, Simbolo_multi, Simbolo_divi;
terminal String reservada_int,id, igual;
terminal String reservada_console, open_pare, close_pare, string_literal;
terminal String numero;
terminal String reservada_if,reservada_else ,open_brace, close_brace;
terminal String mayor , menor, mayor_igual, menor_igual, igual_relacional, distinto;
terminal String and, or, not;
terminal String reservada_for, reservada_while, reservada_do;
terminal String reservada_switch, reservada_case, reservada_break, dos_puntos, reservada_default;

//---> declaracion de NO terminales
non terminal String INICIO; 
non terminal String STMS, STMSLIST ; 
non terminal String E, ME, R, L ;   // Operadores para las expresiones
non terminal String DECLARATION_STMTS, DECLARATION_STMT;
non terminal String PRINT_STMTS, PRINT_STMT, ARGS, ARG, IF_STM, IF_S0;
non terminal String FOR_STMT, INIT_FOR, UPDATE, WHILE_STMT, DO_STMT;
non terminal String SWITCH_STMT, CASE_STATEMENT, DEFAULT_CASE, CASE_LIST, ASIG;

//---> precedencia de menor a mayor
precedence left Simbolo_mas, Simbolo_menos;
precedence left Simbolo_multi, Simbolo_divi;
precedence left and, or, not;
precedence left mayor , menor, mayor_igual, menor_igual, igual_relacional, distinto;
start with INICIO;

/*------------------------- 3ra Area: Reglas Semanticas -------------------------*/

INICIO ::= STMSLIST;

STMS::= PRINT_STMT 
    | DECLARATION_STMT
    | IF_STM
    | SWITCH_STMT
    | FOR_STMT
    | WHILE_STMT
    | DO_STMT
    | ASIG
    | L
;

// Makes it so it accepts any order of declarations and prints
STMSLIST ::= STMSLIST STMS
        | STMS
;

//---> Declaracion y asignacion de variables
/* Stand alone 
DECLARATION_STMTS ::= DECLARATION_STMTS DECLARATION_STMT
                | DECLARATION_STMT;
*/

DECLARATION_STMT ::= reservada_int id:a punto_coma          {: System.out.println("int " + a + " ; "); :}
                | reservada_int id:a igual ME:b punto_coma  {: System.out.println("int " + a + " = " + b + ";"); :}
;

ME ::= ME E:a {: RESULT = a; :}
    | E:a     {: RESULT = a; :}
    ;

E::=  E:a Simbolo_mas E:b   {: RESULT = a + " + " + b; :}
    | E:a Simbolo_menos E:b {: RESULT = a + " - " + b; :}
    | E:a Simbolo_multi E:b {: RESULT = a + " * " + b; :}
    | E:a Simbolo_divi E:b  {: RESULT = a + " / " + b; :}
    | numero:a              {: RESULT = a; :}
    ;

//---> Sentencias imprimir
/*
PRINT_STMTS::= PRINT_STMTS PRINT_STMT
            | PRINT_STMT
;
*/

PRINT_STMT::= reservada_console open_pare ARGS:a close_pare punto_coma {:System.out.println("print(" + a + ")" ); :}
;

ARGS ::= ARGS ARG:a     {: RESULT = a; :}
    | ARG:a             {: RESULT = a; :}
;

ARG ::= ARG:a Simbolo_mas id:b                 {: RESULT = a + " , " + b; :}
    | ARG:a Simbolo_mas string_literal:b       {: RESULT = a + " , " + b; :}
    | id:a                                     {: RESULT = a; :}
    | string_literal:a                         {: RESULT = a; :}
;

//---> Sentencias IF
IF_STM ::= IF_S0
        | IF_S0  reservada_else IF_S0  ;

IF_S0 ::= reservada_if open_pare R close_pare open_brace STMSLIST close_brace;

//---> Operadores relacionales
R::=  R:a mayor R:b                 {: RESULT = a + " > " + b; :}
    | R:a menor R:b                 {: RESULT = a + " < " + b; :}
    | R:a mayor_igual R:b           {: RESULT = a + " >= " + b; :}
    | R:a menor_igual R:b           {: RESULT = a + " <= " + b; :}
    | R:a igual_relacional R:b      {: RESULT = a + " != " + b; :}
    | R:a distinto R:b              {: RESULT = a + " != " + b; :}
    | numero:a                      {: RESULT = a; :}
    | id:a                          {: RESULT = a; :}
    ;

//---> Operadores logicos
L::=  L:a and L:b                 {: RESULT = a + " && " + b; :}
    | L:a or L:b                 {: RESULT = a + " || " + b; :}
    | not L:a               {: RESULT = " ! " + a; :}
    | numero:a                      {: RESULT = a; :}
    | id:a                          {: RESULT = a; :}
    ;

//---> Sentencias for
FOR_STMT ::= reservada_for open_pare INIT_FOR punto_coma R punto_coma UPDATE close_pare open_brace STMSLIST close_brace
    ;
INIT_FOR ::= reservada_int id igual numero
    ;
UPDATE ::= id Simbolo_mas Simbolo_mas
    ;

//---> Sentencias while
WHILE_STMT ::= reservada_while open_pare R close_pare open_brace STMSLIST close_brace
    ;

//---> Sentencias do while 
DO_STMT ::= reservada_do open_brace STMSLIST close_brace reservada_while open_pare R close_pare punto_coma
    ;

//---> Sentencias SWITCH reservada_switch, reservada_case, reservada_break;
SWITCH_STMT ::= reservada_switch open_pare id close_pare open_brace CASE_LIST DEFAULT_CASE  close_brace
    ; 

CASE_LIST ::= CASE_LIST CASE_STATEMENT
        | CASE_STATEMENT
        ;

CASE_STATEMENT ::= reservada_case numero dos_puntos STMSLIST reservada_break punto_coma
               | reservada_case numero dos_puntos STMSLIST
    ; 


DEFAULT_CASE ::= reservada_default dos_puntos STMSLIST
        ;


ASIG ::= id igual ME punto_coma
    ;