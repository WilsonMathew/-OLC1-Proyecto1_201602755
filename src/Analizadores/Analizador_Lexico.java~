/* The following code was generated by JFlex 1.6.1 */

/*------------------ 1ra Area: Codigo de Usuario         ------------------*/

//----------> Paquetes, importaciones
package Analizadores;
import java_cup.runtime.*;
import java.util.LinkedList;


/*------------------ 2da Area: Opciiones y Declaraciones ------------------*/

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/Analizadores/A_Lexico.jflex</tt>
 */
public class Analizador_Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 54,  2, 54, 54, 54,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    54, 25,  9,  0, 18,  0, 26, 10, 13, 14,  3, 22, 21,  7,  5,  1, 
     4,  4,  4,  4,  4,  4,  4,  4,  4,  4, 12, 11, 24, 17, 23,  0, 
     0, 34, 46, 42, 33,  6, 38, 50, 45, 30, 51, 48, 39, 36, 37, 32, 
    31,  8, 44, 41, 28, 49, 35, 43, 52, 53,  8, 19,  0, 20,  0,  8, 
     0, 34, 46, 42, 33,  6, 38, 50, 45, 30, 51, 48, 39, 36, 37, 32, 
    31,  8, 44, 41, 28, 49, 35, 43, 52, 53,  8, 15, 27, 16,  0,  0, 
     0,  0,  0,  0,  0, 54,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    54,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\6\2\1\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\2\1\1\6\1\1\6\6\1\1\5\6\4\0"+
    "\2\6\1\0\1\27\1\0\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\0\1\6\1\0\1\36\1\6\1\36"+
    "\1\6\1\37\5\6\2\0\11\6\1\40\1\0\2\5"+
    "\2\0\2\6\3\0\2\6\2\41\2\6\1\0\2\6"+
    "\1\0\2\6\1\42\2\0\3\6\1\0\2\6\1\0"+
    "\4\6\1\43\1\0\2\44\1\45\2\0\2\6\1\0"+
    "\3\6\2\46\1\6\2\47\1\6\2\0\2\6\1\0"+
    "\1\6\2\50\1\51\1\0\1\6\1\52\2\6\2\0"+
    "\2\6\1\0\5\6\2\0\2\6\1\0\1\6\2\53"+
    "\2\54\1\0\1\6\1\55\1\0\1\55\1\6\1\0"+
    "\2\6\1\56\2\6\1\57\1\60\1\57\1\60\1\0"+
    "\1\6\1\0\1\6\1\61\1\62\1\0\1\61\1\62"+
    "\1\6\1\0\1\6\1\63\2\64\1\6\1\0\1\6"+
    "\1\0\1\6\2\65\1\0\1\6\1\66\3\0\2\6"+
    "\1\0\1\6\3\0\2\6\1\0\1\6\1\0\1\67"+
    "\1\0\1\67\1\6\1\0\1\6\2\0\1\6\1\0"+
    "\1\6\2\0\1\6\1\0\1\6\1\70\2\71\1\0"+
    "\1\6\2\72";

  private static int [] zzUnpackAction() {
    int [] result = new int[250];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\67\0\67\0\245\0\334\0\67"+
    "\0\u0113\0\u014a\0\u0181\0\67\0\67\0\67\0\67\0\67"+
    "\0\67\0\u01b8\0\67\0\67\0\67\0\67\0\67\0\u01ef"+
    "\0\u0226\0\u025d\0\u0294\0\u02cb\0\u0302\0\u0339\0\u0370\0\u03a7"+
    "\0\u03de\0\u0415\0\u044c\0\u0483\0\u04ba\0\u04f1\0\u0528\0\u055f"+
    "\0\u0596\0\u05cd\0\u0604\0\u063b\0\u0672\0\u06a9\0\u06e0\0\u0717"+
    "\0\u014a\0\67\0\u074e\0\67\0\67\0\67\0\67\0\67"+
    "\0\67\0\u0785\0\u07bc\0\u07f3\0\67\0\u082a\0\u0113\0\u0861"+
    "\0\u0898\0\u08cf\0\u0906\0\u093d\0\u0974\0\u09ab\0\u09e2\0\u0a19"+
    "\0\u0a50\0\u0a87\0\u0abe\0\u0af5\0\u0b2c\0\u0b63\0\u0b9a\0\u0bd1"+
    "\0\u0c08\0\67\0\u0c3f\0\u0c76\0\u0cad\0\u0cad\0\u0ce4\0\u0d1b"+
    "\0\u0d52\0\u0d89\0\u0dc0\0\u0df7\0\u0e2e\0\u0e65\0\67\0\u0113"+
    "\0\u0e9c\0\u0ed3\0\u0f0a\0\u0f41\0\u0f78\0\u0faf\0\u0fe6\0\u101d"+
    "\0\u0113\0\u1054\0\u108b\0\u10c2\0\u10f9\0\u1130\0\u1167\0\u119e"+
    "\0\u11d5\0\u120c\0\u1243\0\u127a\0\u12b1\0\u12e8\0\67\0\u131f"+
    "\0\67\0\u0113\0\u0113\0\u1356\0\u138d\0\u13c4\0\u13fb\0\u1432"+
    "\0\u1469\0\u14a0\0\u14d7\0\67\0\u0113\0\u150e\0\67\0\u0113"+
    "\0\u1545\0\u157c\0\u15b3\0\u15ea\0\u1621\0\u1658\0\u168f\0\67"+
    "\0\u0113\0\u0113\0\u16c6\0\u16fd\0\u0113\0\u1734\0\u176b\0\u17a2"+
    "\0\u17d9\0\u1810\0\u1847\0\u187e\0\u18b5\0\u18ec\0\u1923\0\u195a"+
    "\0\u1991\0\u19c8\0\u19ff\0\u1a36\0\u1a6d\0\u1aa4\0\u1adb\0\67"+
    "\0\u0113\0\67\0\u0113\0\u1b12\0\u1b49\0\u1b80\0\u1bb7\0\u1bee"+
    "\0\u1c25\0\u1c5c\0\u1c93\0\u1cca\0\u0113\0\u1d01\0\u1d38\0\67"+
    "\0\67\0\u0113\0\u0113\0\u1d6f\0\u1da6\0\u1ddd\0\u1e14\0\67"+
    "\0\67\0\u1e4b\0\u0113\0\u0113\0\u1e82\0\u1eb9\0\u1ef0\0\u0113"+
    "\0\67\0\u0113\0\u1f27\0\u1f5e\0\u1f95\0\u1fcc\0\u2003\0\67"+
    "\0\u0113\0\u203a\0\u2071\0\u0113\0\u20a8\0\u20df\0\u2116\0\u214d"+
    "\0\u2184\0\u21bb\0\u21f2\0\u2229\0\u2260\0\u2297\0\u22ce\0\u2305"+
    "\0\u233c\0\u2373\0\u23aa\0\67\0\u23e1\0\u0113\0\u2418\0\u244f"+
    "\0\u2486\0\u24bd\0\u24f4\0\u252b\0\u2562\0\u2599\0\u25d0\0\u2607"+
    "\0\u263e\0\u2675\0\u26ac\0\67\0\67\0\u0113\0\u26e3\0\u271a"+
    "\0\67\0\u0113";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[250];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\2\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\2\11"+
    "\1\40\1\11\1\41\1\42\1\43\1\44\1\11\1\45"+
    "\1\46\1\47\1\50\2\11\1\51\1\2\2\11\1\52"+
    "\3\11\1\4\70\0\1\53\1\0\1\54\67\0\1\6"+
    "\1\55\1\56\64\0\1\11\1\0\1\11\1\0\1\11"+
    "\23\0\1\11\1\0\11\11\1\57\1\0\6\11\1\0"+
    "\3\11\1\60\2\11\5\0\1\11\1\0\1\11\1\0"+
    "\1\11\23\0\1\11\1\0\12\11\1\0\6\11\1\0"+
    "\6\11\1\0\2\61\1\0\6\61\1\62\55\61\12\0"+
    "\1\63\75\0\1\64\66\0\1\65\66\0\1\66\66\0"+
    "\1\67\77\0\1\70\67\0\1\71\37\0\1\11\1\0"+
    "\1\11\1\0\1\11\23\0\1\11\1\72\1\73\11\11"+
    "\1\0\6\11\1\0\6\11\46\0\1\74\1\75\24\0"+
    "\1\11\1\0\1\11\1\0\1\11\23\0\1\11\1\0"+
    "\7\11\1\76\1\77\1\11\1\0\6\11\1\0\6\11"+
    "\5\0\1\11\1\0\1\100\1\0\1\11\23\0\1\11"+
    "\1\0\2\11\1\101\7\11\1\0\6\11\1\0\6\11"+
    "\5\0\1\11\1\0\1\11\1\0\1\11\23\0\1\11"+
    "\1\0\2\11\1\102\1\11\1\103\5\11\1\0\6\11"+
    "\1\0\6\11\5\0\1\11\1\0\1\11\1\0\1\11"+
    "\23\0\1\11\1\0\4\11\1\104\5\11\1\0\6\11"+
    "\1\0\6\11\5\0\1\11\1\0\1\105\1\0\1\11"+
    "\23\0\1\11\1\0\12\11\1\0\6\11\1\0\6\11"+
    "\5\0\1\11\1\0\1\11\1\0\1\11\23\0\1\11"+
    "\1\0\2\11\1\106\7\11\1\0\6\11\1\0\6\11"+
    "\35\0\1\107\16\0\1\110\17\0\1\11\1\0\1\11"+
    "\1\0\1\11\23\0\1\111\1\0\12\11\1\0\2\11"+
    "\1\112\3\11\1\0\6\11\5\0\1\11\1\0\1\11"+
    "\1\0\1\11\23\0\1\11\1\0\2\11\1\113\1\11"+
    "\1\114\5\11\1\0\4\11\1\115\1\11\1\0\6\11"+
    "\5\0\1\11\1\0\1\11\1\0\1\11\23\0\1\11"+
    "\1\0\12\11\1\0\4\11\1\116\1\11\1\0\6\11"+
    "\5\0\1\11\1\0\1\11\1\0\1\11\23\0\1\11"+
    "\1\0\2\11\1\117\7\11\1\0\3\11\1\120\2\11"+
    "\1\0\6\11\5\0\1\11\1\0\1\11\1\0\1\11"+
    "\23\0\1\11\1\0\12\11\1\0\3\11\1\121\2\11"+
    "\1\0\6\11\1\0\2\53\1\122\64\53\3\54\1\123"+
    "\63\54\4\0\1\124\66\0\1\125\2\0\1\126\16\0"+
    "\1\126\44\0\1\11\1\0\1\11\1\0\1\11\23\0"+
    "\1\11\1\0\12\11\1\127\1\130\5\11\1\0\6\11"+
    "\5\0\1\11\1\0\1\131\1\0\1\11\23\0\1\11"+
    "\1\0\12\11\1\0\6\11\1\0\6\11\1\0\2\63"+
    "\1\0\7\63\1\132\54\63\34\0\1\133\2\0\1\134"+
    "\33\0\1\11\1\0\1\11\1\0\1\11\23\0\1\135"+
    "\1\0\1\11\1\136\10\11\1\0\6\11\1\0\6\11"+
    "\35\0\1\137\36\0\1\11\1\0\1\11\1\0\1\11"+
    "\23\0\1\140\1\0\12\11\1\0\6\11\1\0\6\11"+
    "\5\0\1\11\1\0\1\11\1\0\1\11\23\0\1\11"+
    "\1\0\10\11\1\141\1\11\1\0\6\11\1\0\6\11"+
    "\5\0\1\11\1\0\1\11\1\0\1\11\23\0\1\11"+
    "\1\0\12\11\1\0\6\11\1\0\1\11\1\142\4\11"+
    "\5\0\1\11\1\0\1\11\1\0\1\11\23\0\1\11"+
    "\1\143\1\144\11\11\1\0\6\11\1\0\6\11\5\0"+
    "\1\11\1\0\1\11\1\0\1\11\23\0\1\11\1\0"+
    "\11\11\1\145\1\0\6\11\1\0\6\11\5\0\1\11"+
    "\1\0\1\11\1\0\1\11\23\0\1\11\1\146\1\147"+
    "\11\11\1\0\6\11\1\0\6\11\5\0\1\11\1\0"+
    "\1\11\1\0\1\11\23\0\1\11\1\0\12\11\1\0"+
    "\2\11\1\150\3\11\1\0\6\11\5\0\1\11\1\0"+
    "\1\11\1\0\1\11\23\0\1\11\1\0\12\11\1\0"+
    "\3\11\1\151\2\11\1\0\6\11\55\0\1\152\47\0"+
    "\2\153\34\0\1\11\1\0\1\11\1\0\1\11\23\0"+
    "\1\11\1\0\12\11\1\0\3\11\1\154\2\11\1\0"+
    "\6\11\5\0\1\11\1\0\1\11\1\0\1\11\23\0"+
    "\1\11\1\153\1\155\11\11\1\0\6\11\1\0\6\11"+
    "\5\0\1\11\1\0\1\11\1\0\1\11\23\0\1\11"+
    "\1\0\7\11\1\156\2\11\1\0\6\11\1\0\6\11"+
    "\5\0\1\11\1\0\1\11\1\0\1\11\23\0\1\11"+
    "\1\0\12\11\1\157\1\160\5\11\1\0\6\11\5\0"+
    "\1\11\1\0\1\11\1\0\1\11\23\0\1\11\1\0"+
    "\4\11\1\161\5\11\1\0\6\11\1\0\6\11\5\0"+
    "\1\11\1\0\1\11\1\0\1\11\23\0\1\11\1\162"+
    "\1\163\11\11\1\0\6\11\1\0\6\11\5\0\1\11"+
    "\1\0\1\11\1\0\1\11\23\0\1\11\1\0\2\11"+
    "\1\164\7\11\1\0\6\11\1\0\6\11\5\0\1\11"+
    "\1\0\1\165\1\0\1\11\23\0\1\11\1\0\12\11"+
    "\1\0\6\11\1\0\6\11\5\0\1\11\1\0\1\11"+
    "\1\0\1\11\23\0\1\11\1\0\4\11\1\166\5\11"+
    "\1\0\6\11\1\0\6\11\1\0\1\54\1\167\1\54"+
    "\1\170\63\54\4\0\1\124\1\0\1\56\64\0\1\125"+
    "\70\0\1\171\64\0\1\11\1\0\1\172\1\0\1\11"+
    "\23\0\1\11\1\0\12\11\1\0\6\11\1\0\6\11"+
    "\5\0\1\11\1\0\1\11\1\0\1\11\23\0\1\11"+
    "\1\0\12\11\1\0\6\11\1\0\4\11\1\173\1\11"+
    "\13\0\1\62\135\0\1\174\45\0\1\175\32\0\1\11"+
    "\1\0\1\11\1\0\1\11\23\0\1\11\1\0\12\11"+
    "\1\0\6\11\1\0\1\11\1\176\4\11\5\0\1\11"+
    "\1\0\1\11\1\0\1\11\23\0\1\11\1\0\2\11"+
    "\1\177\7\11\1\0\6\11\1\0\6\11\5\0\1\11"+
    "\1\0\1\11\1\0\1\11\23\0\1\11\1\200\1\201"+
    "\3\11\1\202\5\11\1\0\6\11\1\0\6\11\5\0"+
    "\1\11\1\0\1\11\1\0\1\11\23\0\1\11\1\0"+
    "\12\11\1\0\5\11\1\203\1\0\6\11\42\0\1\204"+
    "\31\0\1\11\1\0\1\11\1\0\1\11\23\0\1\11"+
    "\1\0\3\11\1\205\6\11\1\0\6\11\1\0\6\11"+
    "\5\0\1\11\1\0\1\11\1\0\1\11\23\0\1\11"+
    "\1\0\2\11\1\206\7\11\1\0\6\11\1\0\6\11"+
    "\46\0\1\207\25\0\1\11\1\0\1\11\1\0\1\11"+
    "\23\0\1\11\1\0\7\11\1\210\2\11\1\0\6\11"+
    "\1\0\6\11\5\0\1\11\1\0\1\11\1\0\1\11"+
    "\23\0\1\11\1\0\5\11\1\211\4\11\1\0\6\11"+
    "\1\0\6\11\36\0\2\212\64\0\1\213\36\0\1\11"+
    "\1\0\1\11\1\0\1\11\23\0\1\11\1\212\1\214"+
    "\11\11\1\0\6\11\1\0\6\11\5\0\1\11\1\0"+
    "\1\11\1\0\1\11\23\0\1\215\1\0\12\11\1\0"+
    "\6\11\1\0\6\11\5\0\1\11\1\0\1\11\1\0"+
    "\1\11\23\0\1\11\1\0\12\11\1\216\1\217\5\11"+
    "\1\0\6\11\7\0\1\220\64\0\1\11\1\0\1\221"+
    "\1\0\1\11\23\0\1\11\1\0\12\11\1\0\6\11"+
    "\1\0\6\11\5\0\1\11\1\0\1\11\1\0\1\11"+
    "\23\0\1\11\1\0\12\11\1\0\3\11\1\222\2\11"+
    "\1\0\6\11\50\0\1\223\23\0\1\11\1\0\1\11"+
    "\1\0\1\11\23\0\1\11\1\0\11\11\1\224\1\0"+
    "\6\11\1\0\6\11\5\0\1\11\1\0\1\11\1\0"+
    "\1\11\23\0\1\11\1\0\11\11\1\225\1\0\6\11"+
    "\1\0\6\11\5\0\1\11\1\0\1\11\1\0\1\11"+
    "\23\0\1\11\1\0\4\11\1\226\5\11\1\0\6\11"+
    "\1\0\6\11\5\0\1\11\1\0\1\11\1\0\1\11"+
    "\23\0\1\11\1\0\10\11\1\227\1\11\1\0\6\11"+
    "\1\0\6\11\1\0\1\54\1\0\1\54\1\170\63\54"+
    "\47\0\1\230\60\0\1\231\31\0\1\11\1\0\1\11"+
    "\1\0\1\11\23\0\1\11\1\0\11\11\1\232\1\0"+
    "\6\11\1\0\6\11\5\0\1\11\1\0\1\11\1\0"+
    "\1\11\23\0\1\11\1\0\3\11\1\233\6\11\1\0"+
    "\6\11\1\0\6\11\46\0\1\234\25\0\1\11\1\0"+
    "\1\11\1\0\1\11\23\0\1\11\1\0\7\11\1\235"+
    "\2\11\1\0\6\11\1\0\6\11\5\0\1\11\1\0"+
    "\1\11\1\0\1\11\23\0\1\11\1\0\12\11\1\0"+
    "\6\11\1\0\1\11\1\236\4\11\5\0\1\11\1\0"+
    "\1\11\1\0\1\11\23\0\1\11\1\0\11\11\1\237"+
    "\1\0\6\11\1\0\6\11\5\0\1\11\1\0\1\11"+
    "\1\0\1\11\23\0\1\11\1\0\12\11\1\0\3\11"+
    "\1\240\2\11\1\0\6\11\5\0\1\11\1\0\1\11"+
    "\1\0\1\11\23\0\1\11\1\0\4\11\1\241\5\11"+
    "\1\0\6\11\1\0\6\11\46\0\1\242\73\0\1\243"+
    "\20\0\1\11\1\0\1\11\1\0\1\11\23\0\1\11"+
    "\1\0\7\11\1\244\2\11\1\0\6\11\1\0\6\11"+
    "\5\0\1\11\1\0\1\11\1\0\1\11\23\0\1\11"+
    "\1\0\12\11\1\0\1\11\1\245\4\11\1\0\6\11"+
    "\41\0\1\246\32\0\1\11\1\0\1\11\1\0\1\11"+
    "\23\0\1\11\1\0\2\11\1\247\7\11\1\0\6\11"+
    "\1\0\6\11\7\0\1\250\64\0\1\11\1\0\1\251"+
    "\1\0\1\11\23\0\1\11\1\0\12\11\1\0\6\11"+
    "\1\0\6\11\5\0\1\11\1\0\1\11\1\0\1\11"+
    "\23\0\1\11\1\0\12\11\1\0\6\11\1\252\1\253"+
    "\5\11\5\0\1\11\1\0\1\11\1\0\1\11\23\0"+
    "\1\11\1\254\1\255\11\11\1\0\6\11\1\0\6\11"+
    "\41\0\1\256\70\0\1\257\30\0\1\11\1\0\1\11"+
    "\1\0\1\11\23\0\1\11\1\0\2\11\1\260\7\11"+
    "\1\0\6\11\1\0\6\11\5\0\1\11\1\0\1\11"+
    "\1\0\1\11\23\0\1\11\1\0\4\11\1\261\5\11"+
    "\1\0\6\11\1\0\6\11\36\0\2\262\34\0\1\11"+
    "\1\0\1\11\1\0\1\11\23\0\1\11\1\262\1\263"+
    "\11\11\1\0\6\11\1\0\6\11\5\0\1\11\1\0"+
    "\1\11\1\0\1\11\23\0\1\11\1\0\11\11\1\264"+
    "\1\0\6\11\1\0\6\11\5\0\1\11\1\0\1\265"+
    "\1\0\1\11\23\0\1\11\1\0\12\11\1\0\6\11"+
    "\1\0\6\11\5\0\1\11\1\0\1\266\1\0\1\11"+
    "\23\0\1\11\1\0\12\11\1\0\6\11\1\0\6\11"+
    "\5\0\1\11\1\0\1\11\1\0\1\11\23\0\1\11"+
    "\1\0\11\11\1\267\1\0\6\11\1\0\6\11\63\0"+
    "\1\270\61\0\1\271\15\0\1\11\1\0\1\11\1\0"+
    "\1\11\23\0\1\11\1\0\12\11\1\0\6\11\1\0"+
    "\2\11\1\272\3\11\5\0\1\11\1\0\1\11\1\0"+
    "\1\11\23\0\1\11\1\0\12\11\1\0\4\11\1\273"+
    "\1\11\1\0\6\11\50\0\1\274\23\0\1\11\1\0"+
    "\1\11\1\0\1\11\23\0\1\11\1\0\11\11\1\275"+
    "\1\0\6\11\1\0\6\11\53\0\1\276\20\0\1\11"+
    "\1\0\1\11\1\0\1\11\23\0\1\11\1\0\12\11"+
    "\1\0\1\11\1\277\4\11\1\0\6\11\65\0\1\300"+
    "\1\301\35\0\1\302\36\0\1\11\1\0\1\11\1\0"+
    "\1\11\23\0\1\11\1\0\12\11\1\0\6\11\1\0"+
    "\4\11\1\303\1\304\5\0\1\11\1\0\1\11\1\0"+
    "\1\11\23\0\1\305\1\0\12\11\1\0\6\11\1\0"+
    "\6\11\55\0\1\306\16\0\1\11\1\0\1\11\1\0"+
    "\1\11\23\0\1\11\1\0\12\11\1\0\3\11\1\307"+
    "\2\11\1\0\6\11\5\0\1\11\1\0\1\11\1\0"+
    "\1\11\23\0\1\310\1\0\12\11\1\0\6\11\1\0"+
    "\6\11\5\0\1\11\1\0\1\11\1\0\1\11\23\0"+
    "\1\11\1\0\12\11\1\311\1\312\5\11\1\0\6\11"+
    "\5\0\1\11\1\0\1\11\1\0\1\11\23\0\1\11"+
    "\1\0\2\11\1\313\7\11\1\0\6\11\1\0\6\11"+
    "\7\0\1\314\64\0\1\11\1\0\1\315\1\0\1\11"+
    "\23\0\1\11\1\0\12\11\1\0\6\11\1\0\6\11"+
    "\43\0\1\316\30\0\1\11\1\0\1\11\1\0\1\11"+
    "\23\0\1\11\1\0\4\11\1\317\5\11\1\0\6\11"+
    "\1\0\6\11\41\0\1\320\32\0\1\11\1\0\1\11"+
    "\1\0\1\11\23\0\1\11\1\0\2\11\1\321\7\11"+
    "\1\0\6\11\1\0\6\11\63\0\1\322\10\0\1\11"+
    "\1\0\1\11\1\0\1\11\23\0\1\11\1\0\12\11"+
    "\1\0\6\11\1\0\2\11\1\323\3\11\5\0\1\11"+
    "\1\0\1\11\1\0\1\11\23\0\1\11\1\0\12\11"+
    "\1\0\3\11\1\324\2\11\1\0\6\11\6\0\1\325"+
    "\65\0\1\11\1\325\1\11\1\0\1\11\23\0\1\11"+
    "\1\0\12\11\1\0\6\11\1\0\6\11\40\0\1\326"+
    "\16\0\1\327\14\0\1\11\1\0\1\11\1\0\1\11"+
    "\23\0\1\11\1\0\1\11\1\330\10\11\1\0\5\11"+
    "\1\331\1\0\6\11\50\0\1\332\23\0\1\11\1\0"+
    "\1\11\1\0\1\11\23\0\1\11\1\0\11\11\1\333"+
    "\1\0\6\11\1\0\6\11\54\0\1\334\50\0\2\335"+
    "\72\0\1\336\30\0\1\11\1\0\1\11\1\0\1\11"+
    "\23\0\1\11\1\335\1\337\11\11\1\0\6\11\1\0"+
    "\6\11\5\0\1\11\1\0\1\11\1\0\1\11\23\0"+
    "\1\11\1\0\4\11\1\340\5\11\1\0\6\11\1\0"+
    "\6\11\41\0\1\341\32\0\1\11\1\0\1\11\1\0"+
    "\1\11\23\0\1\11\1\0\2\11\1\342\7\11\1\0"+
    "\6\11\1\0\6\11\55\0\1\343\20\0\1\344\134\0"+
    "\1\345\16\0\1\11\1\0\1\346\1\0\1\11\23\0"+
    "\1\11\1\0\12\11\1\0\6\11\1\0\6\11\5\0"+
    "\1\11\1\0\1\11\1\0\1\11\23\0\1\11\1\0"+
    "\12\11\1\0\3\11\1\347\2\11\1\0\6\11\57\0"+
    "\1\350\14\0\1\11\1\0\1\11\1\0\1\11\23\0"+
    "\1\11\1\0\12\11\1\0\5\11\1\351\1\0\6\11"+
    "\36\0\2\352\104\0\1\353\16\0\1\11\1\0\1\11"+
    "\1\0\1\11\23\0\1\11\1\0\12\11\1\0\3\11"+
    "\1\354\2\11\1\0\6\11\43\0\1\355\30\0\1\11"+
    "\1\0\1\11\1\0\1\11\23\0\1\11\1\0\4\11"+
    "\1\356\5\11\1\0\6\11\1\0\6\11\35\0\1\357"+
    "\74\0\1\360\30\0\1\11\1\0\1\11\1\0\1\11"+
    "\23\0\1\11\1\0\4\11\1\361\5\11\1\0\6\11"+
    "\1\0\6\11\50\0\1\362\23\0\1\11\1\0\1\11"+
    "\1\0\1\11\23\0\1\11\1\0\11\11\1\363\1\0"+
    "\6\11\1\0\6\11\7\0\1\364\130\0\2\365\21\0"+
    "\1\11\1\0\1\11\1\0\1\11\23\0\1\11\1\0"+
    "\12\11\1\365\1\366\5\11\1\0\6\11\7\0\1\367"+
    "\64\0\1\11\1\0\1\370\1\0\1\11\23\0\1\11"+
    "\1\0\12\11\1\0\6\11\1\0\6\11\51\0\2\371"+
    "\21\0\1\11\1\0\1\11\1\0\1\11\23\0\1\11"+
    "\1\0\12\11\1\371\1\372\5\11\1\0\6\11\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10065];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\2\11\2\1\1\11\3\1\6\11"+
    "\1\1\5\11\23\1\4\0\2\1\1\0\1\11\1\0"+
    "\6\11\1\0\1\1\1\0\1\11\11\1\2\0\11\1"+
    "\1\11\1\0\2\1\2\0\2\1\3\0\2\1\1\11"+
    "\3\1\1\0\2\1\1\0\3\1\2\0\3\1\1\0"+
    "\2\1\1\0\4\1\1\11\1\0\1\11\2\1\2\0"+
    "\2\1\1\0\3\1\1\11\2\1\1\11\2\1\2\0"+
    "\2\1\1\0\1\1\1\11\2\1\1\0\4\1\2\0"+
    "\2\1\1\0\5\1\2\0\2\1\1\0\1\1\1\11"+
    "\1\1\1\11\1\1\1\0\2\1\1\0\2\1\1\0"+
    "\5\1\2\11\2\1\1\0\1\1\1\0\1\1\2\11"+
    "\1\0\3\1\1\0\2\1\1\11\2\1\1\0\1\1"+
    "\1\0\1\1\1\11\1\1\1\0\2\1\3\0\2\1"+
    "\1\0\1\1\3\0\2\1\1\0\1\1\1\0\1\11"+
    "\1\0\2\1\1\0\1\1\2\0\1\1\1\0\1\1"+
    "\2\0\1\1\1\0\1\1\2\11\1\1\1\0\1\1"+
    "\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[250];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    //---> Codigo de usuario en sintaxis java
    public static LinkedList<TError> TablaEL = new LinkedList<TError>();
    public static LinkedList<Tokens> tabla_tokens = new LinkedList<Tokens>();
    


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Analizador_Lexico(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
        System.out.println("Llegamos al final de esta mierda");
    //System.out.println(TablaEL.toString());
  yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(Simbolos.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println(" Error Lexico " + yytext() + " Linea " + yyline + " Columna " + yycolumn); 
                TError datos = new TError(yytext() ,"Error Lexico" ,yyline ,yycolumn);
                TablaEL.add(datos);
            }
          case 59: break;
          case 2: 
            { System.out.println("Reconocido " + yytext()+" divi");  
                        tabla_tokens.add(new Tokens(yytext() ,"Simbolo_divi" ,yyline ,yycolumn));
                        return new Symbol(Simbolos.Simbolo_divi, yycolumn, yyline, yytext());
            }
          case 60: break;
          case 3: 
            { /* White spaces */
            }
          case 61: break;
          case 4: 
            { System.out.println("Reconocido " + yytext()+" multi"); 
                        tabla_tokens.add(new Tokens(yytext() ,"Simbolo_multi" ,yyline ,yycolumn));
                        return new Symbol(Simbolos.Simbolo_multi, yycolumn, yyline, yytext());
            }
          case 62: break;
          case 5: 
            { System.out.println("Reconocido " + yytext()+" numero"); 
                                tabla_tokens.add(new Tokens(yytext() , "numero" ,yyline ,yycolumn)); 
                                return new Symbol(Simbolos.numero, yycolumn, yyline, yytext());
            }
          case 63: break;
          case 6: 
            { System.out.println("Reconocido " + yytext()+" id"); 
                                tabla_tokens.add(new Tokens(yytext() , "id" ,yyline ,yycolumn)); 
                                return new Symbol(Simbolos.id, yycolumn, yyline, yytext());
            }
          case 64: break;
          case 7: 
            { System.out.println("Reconocido " + yytext()+" menos"); 
                        tabla_tokens.add(new Tokens(yytext() ,"Simbolo_menos" ,yyline ,yycolumn));
                        return new Symbol(Simbolos.Simbolo_menos, yycolumn, yyline, yytext());
            }
          case 65: break;
          case 8: 
            { System.out.println("Reconocido " + yytext()+" punto_coma");  
                        tabla_tokens.add(new Tokens(yytext() ,"punto_coma" ,yyline ,yycolumn));
                        return new Symbol(Simbolos.punto_coma, yycolumn, yyline, yytext());
            }
          case 66: break;
          case 9: 
            { System.out.println("Reconocido " + yytext()+" dos_puntos");  
                        tabla_tokens.add(new Tokens(yytext() ,"dos_puntos" ,yyline ,yycolumn));
                        return new Symbol(Simbolos.dos_puntos, yycolumn, yyline, yytext());
            }
          case 67: break;
          case 10: 
            { System.out.println("Reconocido " + yytext()+" open_pare");   
                        tabla_tokens.add(new Tokens(yytext() ,"open_pare" ,yyline ,yycolumn));
                        return new Symbol(Simbolos.open_pare, yycolumn, yyline, yytext());
            }
          case 68: break;
          case 11: 
            { System.out.println("Reconocido " + yytext()+" close_pare");  
                        tabla_tokens.add(new Tokens(yytext() ,"close_pare" ,yyline ,yycolumn));
                        return new Symbol(Simbolos.close_pare, yycolumn, yyline, yytext());
            }
          case 69: break;
          case 12: 
            { System.out.println("Reconocido " + yytext()+" open_brace");  
                        tabla_tokens.add(new Tokens(yytext() ,"open_brace" ,yyline ,yycolumn));
                        return new Symbol(Simbolos.open_brace, yycolumn, yyline, yytext());
            }
          case 70: break;
          case 13: 
            { System.out.println("Reconocido " + yytext()+" close_brace"); 
                        tabla_tokens.add(new Tokens(yytext() ,"close_brace" ,yyline ,yycolumn));
                        return new Symbol(Simbolos.close_brace, yycolumn, yyline, yytext());
            }
          case 71: break;
          case 14: 
            { System.out.println("Reconocido " + yytext()+" igual");       
                        tabla_tokens.add(new Tokens(yytext() ,"igual" ,yyline ,yycolumn));
                        return new Symbol(Simbolos.igual, yycolumn, yyline, yytext());
            }
          case 72: break;
          case 15: 
            { System.out.println("Reconocido " + yytext()+" dollar");      tabla_tokens.add(new Tokens(yytext() ,"dollar" ,yyline ,yycolumn));
            }
          case 73: break;
          case 16: 
            { System.out.println("Reconocido " + yytext()+" open_square_brackets");  tabla_tokens.add(new Tokens(yytext() ,"open_square_brackets" ,yyline ,yycolumn));
            }
          case 74: break;
          case 17: 
            { System.out.println("Reconocido " + yytext()+" close_square_brackets");  tabla_tokens.add(new Tokens(yytext() ,"close_square_brackets" ,yyline ,yycolumn));
            }
          case 75: break;
          case 18: 
            { System.out.println("Reconocido " + yytext()+" coma");        tabla_tokens.add(new Tokens(yytext() ,"coma" ,yyline ,yycolumn));
            }
          case 76: break;
          case 19: 
            { System.out.println("Reconocido " + yytext()+" mas");   
                        tabla_tokens.add(new Tokens(yytext() ,"Simbolo_mas" ,yyline ,yycolumn));
                        return new Symbol(Simbolos.Simbolo_mas, yycolumn, yyline, yytext());
            }
          case 77: break;
          case 20: 
            { System.out.println("Reconocido " + yytext()+" mayor");         
                        tabla_tokens.add(new Tokens(yytext() ,"mayor" ,yyline ,yycolumn));
                        return new Symbol(Simbolos.mayor, yycolumn, yyline, yytext());
            }
          case 78: break;
          case 21: 
            { System.out.println("Reconocido " + yytext()+" menor");         
                        tabla_tokens.add(new Tokens(yytext() ,"menor" ,yyline ,yycolumn));
                        return new Symbol(Simbolos.menor, yycolumn, yyline, yytext());
            }
          case 79: break;
          case 22: 
            { System.out.println("Reconocido " + yytext()+" not");           
                        tabla_tokens.add(new Tokens(yytext() ,"not" ,yyline ,yycolumn));
                        return new Symbol(Simbolos.not, yycolumn, yyline, yytext());
            }
          case 80: break;
          case 23: 
            { System.out.println("Reconocido " + yytext()+" string_literal"); 
                                tabla_tokens.add(new Tokens(yytext() , "string_literal" ,yyline ,yycolumn)); 
                                return new Symbol(Simbolos.string_literal, yycolumn, yyline, yytext());
            }
          case 81: break;
          case 24: 
            { System.out.println("Reconocido " + yytext()+" igual_relacional");         
                        tabla_tokens.add(new Tokens(yytext() ,"igual_relacional" ,yyline ,yycolumn));
                        return new Symbol(Simbolos.igual_relacional, yycolumn, yyline, yytext());
            }
          case 82: break;
          case 25: 
            { System.out.println("Reconocido " + yytext()+" mayor_igual");   
                        tabla_tokens.add(new Tokens(yytext() ,"mayor_igual" ,yyline ,yycolumn));
                        return new Symbol(Simbolos.mayor_igual, yycolumn, yyline, yytext());
            }
          case 83: break;
          case 26: 
            { System.out.println("Reconocido " + yytext()+" menor_igual");   
                        tabla_tokens.add(new Tokens(yytext() ,"menor_igual" ,yyline ,yycolumn));
                        return new Symbol(Simbolos.menor_igual, yycolumn, yyline, yytext());
            }
          case 84: break;
          case 27: 
            { System.out.println("Reconocido " + yytext()+" distinto");      
                        tabla_tokens.add(new Tokens(yytext() ,"distinto" ,yyline ,yycolumn));
                        return new Symbol(Simbolos.distinto, yycolumn, yyline, yytext());
            }
          case 85: break;
          case 28: 
            { System.out.println("Reconocido " + yytext()+" and");           
                        tabla_tokens.add(new Tokens(yytext() ,"and" ,yyline ,yycolumn));
                        return new Symbol(Simbolos.and, yycolumn, yyline, yytext());
            }
          case 86: break;
          case 29: 
            { System.out.println("Reconocido " + yytext()+" or");            
                        tabla_tokens.add(new Tokens(yytext() ,"or" ,yyline ,yycolumn));
                        return new Symbol(Simbolos.or, yycolumn, yyline, yytext());
            }
          case 87: break;
          case 30: 
            { System.out.println("Reconocido " + yytext()+" reservada_if");          
                        tabla_tokens.add(new Tokens(yytext() ,"reservada_if" ,yyline ,yycolumn));
                        return new Symbol(Simbolos.reservada_if, yycolumn, yyline, yytext());
            }
          case 88: break;
          case 31: 
            { System.out.println("Reconocido " + yytext()+" reservada_do");          
                        tabla_tokens.add(new Tokens(yytext() ,"reservada_do" ,yyline ,yycolumn));
                        return new Symbol(Simbolos.reservada_do, yycolumn, yyline, yytext());
            }
          case 89: break;
          case 32: 
            { System.out.println("Reconocido " + yytext()+" comentario"); tabla_tokens.add(new Tokens(yytext() , "comentario" ,yyline ,yycolumn));
            }
          case 90: break;
          case 33: 
            { System.out.println("Reconocido " + yytext()+" reservada_int");         
                        tabla_tokens.add(new Tokens(yytext() ,"reservada_int" ,yyline ,yycolumn));
                        return new Symbol(Simbolos.reservada_int, yycolumn, yyline, yytext());
            }
          case 91: break;
          case 34: 
            { System.out.println("Reconocido " + yytext()+" reservada_for");         
                        tabla_tokens.add(new Tokens(yytext() ,"reservada_for" ,yyline ,yycolumn));
                        return new Symbol(Simbolos.reservada_for, yycolumn, yyline, yytext());
            }
          case 92: break;
          case 35: 
            { System.out.println("Reconocido " + yytext()+" multi_comentario"); tabla_tokens.add(new Tokens(yytext() , "multi_comentario" ,yyline ,yycolumn));
            }
          case 93: break;
          case 36: 
            { System.out.println("Reconocido " + yytext()+" reservada_else");          
                        tabla_tokens.add(new Tokens(yytext() ,"reservada_else" ,yyline ,yycolumn));
                        return new Symbol(Simbolos.reservada_else, yycolumn, yyline, yytext());
            }
          case 94: break;
          case 37: 
            { System.out.println("Reconocido " + yytext()+" reservada_ejex");        tabla_tokens.add(new Tokens(yytext() ,"reservada_ejex" ,yyline ,yycolumn));
            }
          case 95: break;
          case 38: 
            { System.out.println("Reconocido " + yytext()+" reservada_void");        tabla_tokens.add(new Tokens(yytext() ,"reservada_void" ,yyline ,yycolumn));
            }
          case 96: break;
          case 39: 
            { System.out.println("Reconocido " + yytext()+" reservada_main");        tabla_tokens.add(new Tokens(yytext() ,"reservada_main" ,yyline ,yycolumn));
            }
          case 97: break;
          case 40: 
            { System.out.println("Reconocido " + yytext()+" reservada_case");        
                        tabla_tokens.add(new Tokens(yytext() ,"reservada_case" ,yyline ,yycolumn));
                        return new Symbol(Simbolos.reservada_case, yycolumn, yyline, yytext());
            }
          case 98: break;
          case 41: 
            { System.out.println("Reconocido " + yytext()+" reservada_char");        tabla_tokens.add(new Tokens(yytext() ,"reservada_char" ,yyline ,yycolumn));
            }
          case 99: break;
          case 42: 
            { System.out.println("Reconocido " + yytext()+" reservada_bool");        tabla_tokens.add(new Tokens(yytext() ,"reservada_bool" ,yyline ,yycolumn));
            }
          case 100: break;
          case 43: 
            { System.out.println("Reconocido " + yytext()+" reservada_while");     
                        tabla_tokens.add(new Tokens(yytext() ,"reservada_while" ,yyline ,yycolumn));
                        return new Symbol(Simbolos.reservada_while, yycolumn, yyline, yytext());
            }
          case 101: break;
          case 44: 
            { System.out.println("Reconocido " + yytext()+" reservada_break");       
                        tabla_tokens.add(new Tokens(yytext() ,"reservada_break" ,yyline ,yycolumn));
                        return new Symbol(Simbolos.reservada_break, yycolumn, yyline, yytext());
            }
          case 102: break;
          case 45: 
            { System.out.println("Reconocido " + yytext()+" reservada_titulo");      tabla_tokens.add(new Tokens(yytext() ,"reservada_titulo" ,yyline ,yycolumn));
            }
          case 103: break;
          case 46: 
            { System.out.println("Reconocido " + yytext()+" reservada_double");      tabla_tokens.add(new Tokens(yytext() ,"reservada_double" ,yyline ,yycolumn));
            }
          case 104: break;
          case 47: 
            { System.out.println("Reconocido " + yytext()+" reservada_string");      tabla_tokens.add(new Tokens(yytext() ,"reservada_string" ,yyline ,yycolumn));
            }
          case 105: break;
          case 48: 
            { System.out.println("Reconocido " + yytext()+" reservada_switch");      
                        tabla_tokens.add(new Tokens(yytext() ,"reservada_switch" ,yyline ,yycolumn));
                        return new Symbol(Simbolos.reservada_switch, yycolumn, yyline, yytext());
            }
          case 106: break;
          case 49: 
            { System.out.println("Reconocido " + yytext()+" reservada_titulox");     tabla_tokens.add(new Tokens(yytext() ,"reservada_titulox" ,yyline ,yycolumn));
            }
          case 107: break;
          case 50: 
            { System.out.println("Reconocido " + yytext()+" reservada_tituloy");     tabla_tokens.add(new Tokens(yytext() ,"reservada_tituloy" ,yyline ,yycolumn));
            }
          case 108: break;
          case 51: 
            { System.out.println("Reconocido " + yytext()+" reservada_default");       
                        tabla_tokens.add(new Tokens(yytext() ,"reservada_default" ,yyline ,yycolumn));
                        return new Symbol(Simbolos.reservada_default, yycolumn, yyline, yytext());
            }
          case 109: break;
          case 52: 
            { System.out.println("Reconocido " + yytext()+" reservada_valores");     tabla_tokens.add(new Tokens(yytext() ,"reservada_valores" ,yyline ,yycolumn));
            }
          case 110: break;
          case 53: 
            { System.out.println("Reconocido " + yytext()+" reservada_tipodato");    tabla_tokens.add(new Tokens(yytext() ,"reservada_tipodato" ,yyline ,yycolumn));
            }
          case 111: break;
          case 54: 
            { System.out.println("Reconocido " + yytext()+" reservada_newvalor");    tabla_tokens.add(new Tokens(yytext() ,"reservada_newvalor" ,yyline ,yycolumn));
            }
          case 112: break;
          case 55: 
            { System.out.println("Reconocido " + yytext()+" reservada_graficapie");          tabla_tokens.add(new Tokens(yytext() ,"reservada_graficapie" ,yyline ,yycolumn));
            }
          case 113: break;
          case 56: 
            { System.out.println("Reconocido " + yytext()+" reservada_console");     
                                tabla_tokens.add(new Tokens(yytext() ,"reservada_console" ,yyline ,yycolumn));
                                return new Symbol(Simbolos.reservada_console, yycolumn, yyline, yytext());
            }
          case 114: break;
          case 57: 
            { System.out.println("Reconocido " + yytext()+" reservada_graficabarras");       tabla_tokens.add(new Tokens(yytext() ,"reservada_graficabarras" ,yyline ,yycolumn));
            }
          case 115: break;
          case 58: 
            { System.out.println("Reconocido " + yytext()+" reservada_definirglobales");     tabla_tokens.add(new Tokens(yytext() ,"reservada_definirglobales" ,yyline ,yycolumn));
            }
          case 116: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
