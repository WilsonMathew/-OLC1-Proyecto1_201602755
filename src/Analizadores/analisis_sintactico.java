
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import java.io.*;
import java.util.Hashtable;
import java.util.Map;
import java.util.Scanner;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class analisis_sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public analisis_sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public analisis_sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public analisis_sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\253\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\004\000\002\003\004\000\002\003\005" +
    "\000\002\006\011\000\002\007\004\000\002\007\003\000" +
    "\002\010\003\000\002\010\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\004\000\002\005\004\000\002\005\003\000\002\101" +
    "\004\000\002\015\005\000\002\015\007\000\002\015\007" +
    "\000\002\077\007\000\002\102\004\000\002\102\003\000" +
    "\002\075\005\000\002\075\005\000\002\075\005\000\002" +
    "\075\003\000\002\075\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\012\004" +
    "\000\002\012\003\000\002\011\005\000\002\011\005\000" +
    "\002\011\005\000\002\011\005\000\002\011\003\000\002" +
    "\011\003\000\002\017\011\000\002\020\004\000\002\020" +
    "\003\000\002\021\005\000\002\021\005\000\002\021\005" +
    "\000\002\021\003\000\002\021\003\000\002\022\003\000" +
    "\002\022\004\000\002\100\013\000\002\100\012\000\002" +
    "\100\011\000\002\023\011\000\002\023\010\000\002\013" +
    "\005\000\002\013\005\000\002\013\005\000\002\013\005" +
    "\000\002\013\005\000\002\013\005\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\014\005\000\002" +
    "\014\005\000\002\014\004\000\002\014\003\000\002\014" +
    "\004\000\002\014\004\000\002\076\004\000\002\076\003" +
    "\000\002\024\020\000\002\025\005\000\002\026\011\000" +
    "\002\027\013\000\002\030\012\000\002\033\004\000\002" +
    "\033\003\000\002\031\006\000\002\031\006\000\002\032" +
    "\005\000\002\034\006\000\002\035\011\000\002\037\007" +
    "\000\002\037\007\000\002\037\007\000\002\041\013\000" +
    "\002\043\004\000\002\043\003\000\002\043\003\000\002" +
    "\043\003\000\002\044\003\000\002\044\003\000\002\044" +
    "\003\000\002\042\004\000\002\042\003\000\002\045\013" +
    "\000\002\047\004\000\002\047\003\000\002\047\003\000" +
    "\002\047\003\000\002\050\003\000\002\050\003\000\002" +
    "\050\003\000\002\046\004\000\002\046\003\000\002\036" +
    "\003\000\002\036\003\000\002\036\003\000\002\040\004" +
    "\000\002\040\003\000\002\051\011\000\002\052\007\000" +
    "\002\052\007\000\002\052\007\000\002\072\007\000\002" +
    "\072\007\000\002\072\007\000\002\073\007\000\002\073" +
    "\007\000\002\073\007\000\002\053\013\000\002\054\004" +
    "\000\002\054\003\000\002\054\003\000\002\054\003\000" +
    "\002\055\003\000\002\055\003\000\002\055\003\000\002" +
    "\056\004\000\002\056\003\000\002\057\013\000\002\060" +
    "\004\000\002\060\003\000\002\060\003\000\002\060\003" +
    "\000\002\061\003\000\002\061\003\000\002\061\003\000" +
    "\002\062\004\000\002\062\003\000\002\063\003\000\002" +
    "\063\003\000\002\063\003\000\002\063\003\000\002\063" +
    "\003\000\002\064\004\000\002\064\003\000\002\065\011" +
    "\000\002\066\007\000\002\067\003\000\002\067\003\000" +
    "\002\070\003\000\002\070\003\000\002\070\003\000\002" +
    "\071\004\000\002\071\003\000\002\074\012" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0161\000\010\005\007\006\010\007\004\001\002\000" +
    "\054\002\ufff7\003\ufff7\005\ufff7\006\ufff7\007\ufff7\015\ufff7" +
    "\016\ufff7\017\ufff7\020\ufff7\021\ufff7\022\ufff7\024\ufff7\033" +
    "\ufff7\036\ufff7\050\ufff7\051\ufff7\052\ufff7\053\ufff7\054\ufff7" +
    "\055\ufff7\057\ufff7\001\002\000\010\005\007\006\010\007" +
    "\004\001\002\000\010\002\uffff\006\010\007\004\001\002" +
    "\000\004\004\015\001\002\000\054\002\ufff8\003\ufff8\005" +
    "\ufff8\006\ufff8\007\ufff8\015\ufff8\016\ufff8\017\ufff8\020\ufff8" +
    "\021\ufff8\022\ufff8\024\ufff8\033\ufff8\036\ufff8\050\ufff8\051" +
    "\ufff8\052\ufff8\053\ufff8\054\ufff8\055\ufff8\057\ufff8\001\002" +
    "\000\004\002\014\001\002\000\004\002\000\001\002\000" +
    "\012\002\ufff9\005\ufff9\006\ufff9\007\ufff9\001\002\000\004" +
    "\002\001\001\002\000\004\027\016\001\002\000\004\030" +
    "\017\001\002\000\004\035\020\001\002\000\044\003\052" +
    "\005\032\006\010\007\004\015\030\016\051\017\045\020" +
    "\040\021\025\022\046\024\023\033\042\050\057\051\054" +
    "\052\050\053\036\055\031\001\002\000\052\003\uffef\005" +
    "\uffef\006\uffef\007\uffef\015\uffef\016\uffef\017\uffef\020\uffef" +
    "\021\uffef\022\uffef\024\uffef\033\uffef\036\uffef\050\uffef\051" +
    "\uffef\052\uffef\053\uffef\054\uffef\055\uffef\057\uffef\001\002" +
    "\000\052\003\uffea\005\uffea\006\uffea\007\uffea\015\uffea\016" +
    "\uffea\017\uffea\020\uffea\021\uffea\022\uffea\024\uffea\033\uffea" +
    "\036\uffea\050\uffea\051\uffea\052\uffea\053\uffea\054\uffea\055" +
    "\uffea\057\uffea\001\002\000\004\026\u0150\001\002\000\004" +
    "\022\u0141\001\002\000\004\022\u013d\001\002\000\052\003" +
    "\ufff1\005\ufff1\006\ufff1\007\ufff1\015\ufff1\016\ufff1\017\ufff1" +
    "\020\ufff1\021\ufff1\022\ufff1\024\ufff1\033\ufff1\036\ufff1\050" +
    "\ufff1\051\ufff1\052\ufff1\053\ufff1\054\ufff1\055\ufff1\057\ufff1" +
    "\001\002\000\046\003\052\005\032\006\010\007\004\015" +
    "\030\016\051\017\045\020\040\021\025\022\046\024\023" +
    "\033\042\036\u013c\050\057\051\054\052\050\053\036\055" +
    "\031\001\002\000\004\022\uffd9\001\002\000\004\010\u013b" +
    "\001\002\000\010\060\252\061\251\072\253\001\002\000" +
    "\054\003\uffc5\005\uffc5\006\uffc5\007\uffc5\015\uffc5\016\uffc5" +
    "\017\uffc5\020\uffc5\021\uffc5\022\uffc5\024\uffc5\033\uffc5\034" +
    "\227\036\uffc5\050\uffc5\051\uffc5\052\uffc5\053\uffc5\054\uffc5" +
    "\055\uffc5\057\uffc5\001\002\000\052\003\uffe6\005\uffe6\006" +
    "\uffe6\007\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6" +
    "\022\uffe6\024\uffe6\033\uffe6\036\uffe6\050\uffe6\051\uffe6\052" +
    "\uffe6\053\uffe6\054\uffe6\055\uffe6\057\uffe6\001\002\000\052" +
    "\003\ufff0\005\ufff0\006\ufff0\007\ufff0\015\ufff0\016\ufff0\017" +
    "\ufff0\020\ufff0\021\ufff0\022\ufff0\024\ufff0\033\ufff0\036\ufff0" +
    "\050\ufff0\051\ufff0\052\ufff0\053\ufff0\054\ufff0\055\ufff0\057" +
    "\ufff0\001\002\000\004\027\204\001\002\000\052\003\uffed" +
    "\005\uffed\006\uffed\007\uffed\015\uffed\016\uffed\017\uffed\020" +
    "\uffed\021\uffed\022\uffed\024\uffed\033\uffed\036\uffed\050\uffed" +
    "\051\uffed\052\uffed\053\uffed\054\uffed\055\uffed\057\uffed\001" +
    "\002\000\004\022\uffd6\001\002\000\052\003\ufff2\005\ufff2" +
    "\006\ufff2\007\ufff2\015\ufff2\016\ufff2\017\ufff2\020\ufff2\021" +
    "\ufff2\022\ufff2\024\ufff2\033\ufff2\036\ufff2\050\ufff2\051\ufff2" +
    "\052\ufff2\053\ufff2\054\ufff2\055\ufff2\057\ufff2\001\002\000" +
    "\004\027\175\001\002\000\052\003\ufff4\005\ufff4\006\ufff4" +
    "\007\ufff4\015\ufff4\016\ufff4\017\ufff4\020\ufff4\021\ufff4\022" +
    "\ufff4\024\ufff4\033\ufff4\036\ufff4\050\ufff4\051\ufff4\052\ufff4" +
    "\053\ufff4\054\ufff4\055\ufff4\057\ufff4\001\002\000\052\003" +
    "\uffec\005\uffec\006\uffec\007\uffec\015\uffec\016\uffec\017\uffec" +
    "\020\uffec\021\uffec\022\uffec\024\uffec\033\uffec\036\uffec\050" +
    "\uffec\051\uffec\052\uffec\053\uffec\054\uffec\055\uffec\057\uffec" +
    "\001\002\000\004\022\uffd7\001\002\000\004\023\156\001" +
    "\002\000\052\003\ufff6\005\ufff6\006\ufff6\007\ufff6\015\ufff6" +
    "\016\ufff6\017\ufff6\020\ufff6\021\ufff6\022\ufff6\024\ufff6\033" +
    "\ufff6\036\ufff6\050\ufff6\051\ufff6\052\ufff6\053\ufff6\054\ufff6" +
    "\055\ufff6\057\ufff6\001\002\000\004\035\146\001\002\000" +
    "\004\022\uffd8\001\002\000\004\010\145\001\002\000\052" +
    "\003\ufff5\005\ufff5\006\ufff5\007\ufff5\015\ufff5\016\ufff5\017" +
    "\ufff5\020\ufff5\021\ufff5\022\ufff5\024\ufff5\033\ufff5\036\ufff5" +
    "\050\ufff5\051\ufff5\052\ufff5\053\ufff5\054\ufff5\055\ufff5\057" +
    "\ufff5\001\002\000\004\027\137\001\002\000\052\003\uffe9" +
    "\005\uffe9\006\uffe9\007\uffe9\015\uffe9\016\uffe9\017\uffe9\020" +
    "\uffe9\021\uffe9\022\uffe9\024\uffe9\033\uffe9\036\uffe9\050\uffe9" +
    "\051\uffe9\052\uffe9\053\uffe9\054\uffe9\055\uffe9\057\uffe9\001" +
    "\002\000\052\003\uffeb\005\uffeb\006\uffeb\007\uffeb\015\uffeb" +
    "\016\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb\024\uffeb\033" +
    "\uffeb\036\uffeb\050\uffeb\051\uffeb\052\uffeb\053\uffeb\054\uffeb" +
    "\055\uffeb\057\uffeb\001\002\000\004\027\062\001\002\000" +
    "\052\003\uffee\005\uffee\006\uffee\007\uffee\015\uffee\016\uffee" +
    "\017\uffee\020\uffee\021\uffee\022\uffee\024\uffee\033\uffee\036" +
    "\uffee\050\uffee\051\uffee\052\uffee\053\uffee\054\uffee\055\uffee" +
    "\057\uffee\001\002\000\052\003\ufff3\005\ufff3\006\ufff3\007" +
    "\ufff3\015\ufff3\016\ufff3\017\ufff3\020\ufff3\021\ufff3\022\ufff3" +
    "\024\ufff3\033\ufff3\036\ufff3\050\ufff3\051\ufff3\052\ufff3\053" +
    "\ufff3\054\ufff3\055\ufff3\057\ufff3\001\002\000\004\015\063" +
    "\001\002\000\004\022\064\001\002\000\004\023\065\001" +
    "\002\000\004\032\066\001\002\000\004\010\067\001\002" +
    "\000\016\022\070\031\071\032\077\045\075\046\073\047" +
    "\072\001\002\000\036\010\uffb7\022\uffb7\030\uffb7\031\uffb7" +
    "\032\uffb7\037\uffb7\040\uffb7\041\uffb7\042\uffb7\043\uffb7\044" +
    "\uffb7\045\uffb7\046\uffb7\047\uffb7\001\002\000\036\010\uffb6" +
    "\022\uffb6\030\uffb6\031\uffb6\032\uffb6\037\uffb6\040\uffb6\041" +
    "\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6\046\uffb6\047\uffb6" +
    "\001\002\000\010\022\070\031\071\032\077\001\002\000" +
    "\010\022\070\031\071\032\077\001\002\000\036\010\uffb2" +
    "\022\uffb2\030\uffb2\031\uffb2\032\uffb2\037\121\040\120\041" +
    "\115\042\116\043\117\044\122\045\131\046\132\047\uffb2" +
    "\001\002\000\010\022\070\031\071\032\077\001\002\000" +
    "\020\010\102\022\070\031\071\032\077\045\075\046\073" +
    "\047\072\001\002\000\036\010\uffb8\022\uffb8\030\uffb8\031" +
    "\uffb8\032\uffb8\037\uffb8\040\uffb8\041\uffb8\042\uffb8\043\uffb8" +
    "\044\uffb8\045\uffb8\046\uffb8\047\uffb8\001\002\000\022\010" +
    "\uffae\022\uffae\030\uffae\031\uffae\032\uffae\045\uffae\046\uffae" +
    "\047\uffae\001\002\000\022\010\uffaf\022\uffaf\030\uffaf\031" +
    "\uffaf\032\uffaf\045\uffaf\046\uffaf\047\uffaf\001\002\000\004" +
    "\022\104\001\002\000\004\030\107\001\002\000\004\011" +
    "\105\001\002\000\004\011\106\001\002\000\004\030\uffac" +
    "\001\002\000\004\035\110\001\002\000\044\003\052\005" +
    "\032\006\010\007\004\015\030\016\051\017\045\020\040" +
    "\021\025\022\046\024\023\033\042\050\057\051\054\052" +
    "\050\053\036\055\031\001\002\000\046\003\052\005\032" +
    "\006\010\007\004\015\030\016\051\017\045\020\040\021" +
    "\025\022\046\024\023\033\042\036\113\050\057\051\054" +
    "\052\050\053\036\055\031\001\002\000\052\003\uffe7\005" +
    "\uffe7\006\uffe7\007\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7" +
    "\021\uffe7\022\uffe7\024\uffe7\033\uffe7\036\uffe7\050\uffe7\051" +
    "\uffe7\052\uffe7\053\uffe7\054\uffe7\055\uffe7\057\uffe7\001\002" +
    "\000\052\003\uffad\005\uffad\006\uffad\007\uffad\015\uffad\016" +
    "\uffad\017\uffad\020\uffad\021\uffad\022\uffad\024\uffad\033\uffad" +
    "\036\uffad\050\uffad\051\uffad\052\uffad\053\uffad\054\uffad\055" +
    "\uffad\057\uffad\001\002\000\036\010\uffb1\022\uffb1\030\uffb1" +
    "\031\uffb1\032\uffb1\037\121\040\120\041\115\042\116\043" +
    "\117\044\122\045\uffb1\046\uffb1\047\uffb1\001\002\000\010" +
    "\022\070\031\071\032\077\001\002\000\010\022\070\031" +
    "\071\032\077\001\002\000\010\022\070\031\071\032\077" +
    "\001\002\000\010\022\070\031\071\032\077\001\002\000" +
    "\010\022\070\031\071\032\077\001\002\000\010\022\070" +
    "\031\071\032\077\001\002\000\036\010\uffb9\022\uffb9\030" +
    "\uffb9\031\uffb9\032\uffb9\037\uffb9\040\uffb9\041\uffb9\042\uffb9" +
    "\043\uffb9\044\uffb9\045\uffb9\046\uffb9\047\uffb9\001\002\000" +
    "\036\010\uffbe\022\uffbe\030\uffbe\031\uffbe\032\uffbe\037\uffbe" +
    "\040\uffbe\041\uffbe\042\uffbe\043\uffbe\044\uffbe\045\uffbe\046" +
    "\uffbe\047\uffbe\001\002\000\036\010\uffbd\022\uffbd\030\uffbd" +
    "\031\uffbd\032\uffbd\037\uffbd\040\uffbd\041\uffbd\042\uffbd\043" +
    "\uffbd\044\uffbd\045\uffbd\046\uffbd\047\uffbd\001\002\000\036" +
    "\010\uffba\022\uffba\030\uffba\031\uffba\032\uffba\037\uffba\040" +
    "\uffba\041\uffba\042\uffba\043\uffba\044\uffba\045\uffba\046\uffba" +
    "\047\uffba\001\002\000\036\010\uffbb\022\uffbb\030\uffbb\031" +
    "\uffbb\032\uffbb\037\uffbb\040\uffbb\041\uffbb\042\uffbb\043\uffbb" +
    "\044\uffbb\045\uffbb\046\uffbb\047\uffbb\001\002\000\036\010" +
    "\uffbc\022\uffbc\030\uffbc\031\uffbc\032\uffbc\037\uffbc\040\uffbc" +
    "\041\uffbc\042\uffbc\043\uffbc\044\uffbc\045\uffbc\046\uffbc\047" +
    "\uffbc\001\002\000\010\022\070\031\071\032\077\001\002" +
    "\000\010\022\070\031\071\032\077\001\002\000\036\010" +
    "\uffb4\022\uffb4\030\uffb4\031\uffb4\032\uffb4\037\121\040\120" +
    "\041\115\042\116\043\117\044\122\045\uffb4\046\uffb4\047" +
    "\uffb4\001\002\000\036\010\uffb5\022\uffb5\030\uffb5\031\uffb5" +
    "\032\uffb5\037\121\040\120\041\115\042\116\043\117\044" +
    "\122\045\uffb5\046\uffb5\047\uffb5\001\002\000\036\010\uffb0" +
    "\022\uffb0\030\uffb0\031\uffb0\032\uffb0\037\121\040\120\041" +
    "\115\042\116\043\117\044\122\045\uffb0\046\uffb0\047\uffb0" +
    "\001\002\000\036\010\uffb3\022\uffb3\030\uffb3\031\uffb3\032" +
    "\uffb3\037\121\040\120\041\115\042\116\043\117\044\122" +
    "\045\uffb3\046\uffb3\047\uffb3\001\002\000\016\022\070\031" +
    "\071\032\077\045\075\046\073\047\072\001\002\000\020" +
    "\022\070\030\141\031\071\032\077\045\075\046\073\047" +
    "\072\001\002\000\004\035\142\001\002\000\044\003\052" +
    "\005\032\006\010\007\004\015\030\016\051\017\045\020" +
    "\040\021\025\022\046\024\023\033\042\050\057\051\054" +
    "\052\050\053\036\055\031\001\002\000\046\003\052\005" +
    "\032\006\010\007\004\015\030\016\051\017\045\020\040" +
    "\021\025\022\046\024\023\033\042\036\144\050\057\051" +
    "\054\052\050\053\036\055\031\001\002\000\052\003\uffab" +
    "\005\uffab\006\uffab\007\uffab\015\uffab\016\uffab\017\uffab\020" +
    "\uffab\021\uffab\022\uffab\024\uffab\033\uffab\036\uffab\050\uffab" +
    "\051\uffab\052\uffab\053\uffab\054\uffab\055\uffab\057\uffab\001" +
    "\002\000\052\003\uffe8\005\uffe8\006\uffe8\007\uffe8\015\uffe8" +
    "\016\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8\024\uffe8\033" +
    "\uffe8\036\uffe8\050\uffe8\051\uffe8\052\uffe8\053\uffe8\054\uffe8" +
    "\055\uffe8\057\uffe8\001\002\000\044\003\052\005\032\006" +
    "\010\007\004\015\030\016\051\017\045\020\040\021\025" +
    "\022\046\024\023\033\042\050\057\051\054\052\050\053" +
    "\036\055\031\001\002\000\046\003\052\005\032\006\010" +
    "\007\004\015\030\016\051\017\045\020\040\021\025\022" +
    "\046\024\023\033\042\036\150\050\057\051\054\052\050" +
    "\053\036\055\031\001\002\000\004\051\151\001\002\000" +
    "\004\027\152\001\002\000\016\022\070\031\071\032\077" +
    "\045\075\046\073\047\072\001\002\000\020\022\070\030" +
    "\154\031\071\032\077\045\075\046\073\047\072\001\002" +
    "\000\004\010\155\001\002\000\052\003\uffaa\005\uffaa\006" +
    "\uffaa\007\uffaa\015\uffaa\016\uffaa\017\uffaa\020\uffaa\021\uffaa" +
    "\022\uffaa\024\uffaa\033\uffaa\036\uffaa\050\uffaa\051\uffaa\052" +
    "\uffaa\053\uffaa\054\uffaa\055\uffaa\057\uffaa\001\002\000\006" +
    "\022\162\032\157\001\002\000\024\010\uffcf\011\uffcf\012" +
    "\uffcf\013\uffcf\014\uffcf\022\uffcf\030\uffcf\031\uffcf\032\uffcf" +
    "\001\002\000\020\010\uffd4\011\170\012\166\013\167\014" +
    "\165\022\uffd4\032\uffd4\001\002\000\010\010\163\022\162" +
    "\032\157\001\002\000\024\010\uffce\011\uffce\012\uffce\013" +
    "\uffce\014\uffce\022\uffce\030\uffce\031\uffce\032\uffce\001\002" +
    "\000\052\003\uffa3\005\uffa3\006\uffa3\007\uffa3\015\uffa3\016" +
    "\uffa3\017\uffa3\020\uffa3\021\uffa3\022\uffa3\024\uffa3\033\uffa3" +
    "\036\uffa3\050\uffa3\051\uffa3\052\uffa3\053\uffa3\054\uffa3\055" +
    "\uffa3\057\uffa3\001\002\000\020\010\uffd5\011\170\012\166" +
    "\013\167\014\165\022\uffd5\032\uffd5\001\002\000\006\022" +
    "\162\032\157\001\002\000\006\022\162\032\157\001\002" +
    "\000\006\022\162\032\157\001\002\000\006\022\162\032" +
    "\157\001\002\000\024\010\uffd3\011\uffd3\012\uffd3\013\167" +
    "\014\165\022\uffd3\030\uffd3\031\uffd3\032\uffd3\001\002\000" +
    "\024\010\uffd1\011\uffd1\012\uffd1\013\uffd1\014\uffd1\022\uffd1" +
    "\030\uffd1\031\uffd1\032\uffd1\001\002\000\024\010\uffd2\011" +
    "\uffd2\012\uffd2\013\167\014\165\022\uffd2\030\uffd2\031\uffd2" +
    "\032\uffd2\001\002\000\024\010\uffd0\011\uffd0\012\uffd0\013" +
    "\uffd0\014\uffd0\022\uffd0\030\uffd0\031\uffd0\032\uffd0\001\002" +
    "\000\016\022\070\031\071\032\077\045\075\046\073\047" +
    "\072\001\002\000\020\022\070\030\177\031\071\032\077" +
    "\045\075\046\073\047\072\001\002\000\004\035\200\001" +
    "\002\000\046\003\052\005\032\006\010\007\004\015\030" +
    "\016\051\017\045\020\040\021\025\022\046\024\023\033" +
    "\042\036\202\050\057\051\054\052\050\053\036\055\031" +
    "\001\002\000\046\003\052\005\032\006\010\007\004\015" +
    "\030\016\051\017\045\020\040\021\025\022\046\024\023" +
    "\033\042\036\203\050\057\051\054\052\050\053\036\055" +
    "\031\001\002\000\054\003\uffbf\005\uffbf\006\uffbf\007\uffbf" +
    "\015\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf\024" +
    "\uffbf\033\uffbf\034\uffbf\036\uffbf\050\uffbf\051\uffbf\052\uffbf" +
    "\053\uffbf\054\uffbf\055\uffbf\057\uffbf\001\002\000\054\003" +
    "\uffc0\005\uffc0\006\uffc0\007\uffc0\015\uffc0\016\uffc0\017\uffc0" +
    "\020\uffc0\021\uffc0\022\uffc0\024\uffc0\033\uffc0\034\uffc0\036" +
    "\uffc0\050\uffc0\051\uffc0\052\uffc0\053\uffc0\054\uffc0\055\uffc0" +
    "\057\uffc0\001\002\000\004\022\205\001\002\000\004\030" +
    "\206\001\002\000\004\035\207\001\002\000\004\054\211" +
    "\001\002\000\006\054\uffa7\057\uffa7\001\002\000\006\031" +
    "\222\032\221\001\002\000\006\054\211\057\215\001\002" +
    "\000\006\054\uffa8\057\uffa8\001\002\000\004\036\220\001" +
    "\002\000\004\056\216\001\002\000\044\003\052\005\032" +
    "\006\010\007\004\015\030\016\051\017\045\020\040\021" +
    "\025\022\046\024\023\033\042\050\057\051\054\052\050" +
    "\053\036\055\031\001\002\000\046\003\052\005\032\006" +
    "\010\007\004\015\030\016\051\017\045\020\040\021\025" +
    "\022\046\024\023\033\042\036\uffa4\050\057\051\054\052" +
    "\050\053\036\055\031\001\002\000\052\003\uffa9\005\uffa9" +
    "\006\uffa9\007\uffa9\015\uffa9\016\uffa9\017\uffa9\020\uffa9\021" +
    "\uffa9\022\uffa9\024\uffa9\033\uffa9\036\uffa9\050\uffa9\051\uffa9" +
    "\052\uffa9\053\uffa9\054\uffa9\055\uffa9\057\uffa9\001\002\000" +
    "\004\056\225\001\002\000\004\056\223\001\002\000\044" +
    "\003\052\005\032\006\010\007\004\015\030\016\051\017" +
    "\045\020\040\021\025\022\046\024\023\033\042\050\057" +
    "\051\054\052\050\053\036\055\031\001\002\000\050\003" +
    "\052\005\032\006\010\007\004\015\030\016\051\017\045" +
    "\020\040\021\025\022\046\024\023\033\042\050\057\051" +
    "\054\052\050\053\036\054\uffa5\055\031\057\uffa5\001\002" +
    "\000\044\003\052\005\032\006\010\007\004\015\030\016" +
    "\051\017\045\020\040\021\025\022\046\024\023\033\042" +
    "\050\057\051\054\052\050\053\036\055\031\001\002\000" +
    "\050\003\052\005\032\006\010\007\004\015\030\016\051" +
    "\017\045\020\040\021\025\022\046\024\023\033\042\050" +
    "\057\051\054\052\050\053\036\054\uffa6\055\031\057\uffa6" +
    "\001\002\000\004\033\241\001\002\000\054\003\uffc4\005" +
    "\uffc4\006\uffc4\007\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4" +
    "\021\uffc4\022\uffc4\024\uffc4\033\uffc4\034\231\036\uffc4\050" +
    "\uffc4\051\uffc4\052\uffc4\053\uffc4\054\uffc4\055\uffc4\057\uffc4" +
    "\001\002\000\004\033\232\001\002\000\004\027\233\001" +
    "\002\000\016\022\070\031\071\032\077\045\075\046\073" +
    "\047\072\001\002\000\020\022\070\030\235\031\071\032" +
    "\077\045\075\046\073\047\072\001\002\000\004\035\236" +
    "\001\002\000\044\003\052\005\032\006\010\007\004\015" +
    "\030\016\051\017\045\020\040\021\025\022\046\024\023" +
    "\033\042\050\057\051\054\052\050\053\036\055\031\001" +
    "\002\000\046\003\052\005\032\006\010\007\004\015\030" +
    "\016\051\017\045\020\040\021\025\022\046\024\023\033" +
    "\042\036\240\050\057\051\054\052\050\053\036\055\031" +
    "\001\002\000\054\003\uffc3\005\uffc3\006\uffc3\007\uffc3\015" +
    "\uffc3\016\uffc3\017\uffc3\020\uffc3\021\uffc3\022\uffc3\024\uffc3" +
    "\033\uffc3\034\uffc3\036\uffc3\050\uffc3\051\uffc3\052\uffc3\053" +
    "\uffc3\054\uffc3\055\uffc3\057\uffc3\001\002\000\004\027\242" +
    "\001\002\000\016\022\070\031\071\032\077\045\075\046" +
    "\073\047\072\001\002\000\020\022\070\030\244\031\071" +
    "\032\077\045\075\046\073\047\072\001\002\000\004\035" +
    "\245\001\002\000\046\003\052\005\032\006\010\007\004" +
    "\015\030\016\051\017\045\020\040\021\025\022\046\024" +
    "\023\033\042\036\247\050\057\051\054\052\050\053\036" +
    "\055\031\001\002\000\046\003\052\005\032\006\010\007" +
    "\004\015\030\016\051\017\045\020\040\021\025\022\046" +
    "\024\023\033\042\036\250\050\057\051\054\052\050\053" +
    "\036\055\031\001\002\000\054\003\uffc1\005\uffc1\006\uffc1" +
    "\007\uffc1\015\uffc1\016\uffc1\017\uffc1\020\uffc1\021\uffc1\022" +
    "\uffc1\024\uffc1\033\uffc1\034\uffc1\036\uffc1\050\uffc1\051\uffc1" +
    "\052\uffc1\053\uffc1\054\uffc1\055\uffc1\057\uffc1\001\002\000" +
    "\054\003\uffc2\005\uffc2\006\uffc2\007\uffc2\015\uffc2\016\uffc2" +
    "\017\uffc2\020\uffc2\021\uffc2\022\uffc2\024\uffc2\033\uffc2\034" +
    "\uffc2\036\uffc2\050\uffc2\051\uffc2\052\uffc2\053\uffc2\054\uffc2" +
    "\055\uffc2\057\uffc2\001\002\000\004\027\367\001\002\000" +
    "\004\027\305\001\002\000\004\027\254\001\002\000\004" +
    "\030\255\001\002\000\004\035\256\001\002\000\006\016" +
    "\261\017\262\001\002\000\010\016\261\017\262\036\303" +
    "\001\002\000\004\022\264\001\002\000\004\022\uff5e\001" +
    "\002\000\004\022\uff5d\001\002\000\010\016\uff58\017\uff58" +
    "\036\uff58\001\002\000\004\023\265\001\002\000\010\031" +
    "\271\032\266\073\267\001\002\000\004\010\uff5b\001\002" +
    "\000\004\035\274\001\002\000\004\010\273\001\002\000" +
    "\004\010\uff5c\001\002\000\004\010\uff5a\001\002\000\010" +
    "\016\uff5f\017\uff5f\036\uff5f\001\002\000\004\074\275\001" +
    "\002\000\004\071\276\001\002\000\004\031\277\001\002" +
    "\000\004\071\300\001\002\000\004\031\301\001\002\000" +
    "\004\036\302\001\002\000\020\010\uff57\022\uff57\031\uff57" +
    "\032\uff57\036\uff57\071\uff57\073\uff57\001\002\000\052\003" +
    "\uff60\005\uff60\006\uff60\007\uff60\015\uff60\016\uff60\017\uff60" +
    "\020\uff60\021\uff60\022\uff60\024\uff60\033\uff60\036\uff60\050" +
    "\uff60\051\uff60\052\uff60\053\uff60\054\uff60\055\uff60\057\uff60" +
    "\001\002\000\010\016\uff59\017\uff59\036\uff59\001\002\000" +
    "\004\030\306\001\002\000\004\035\307\001\002\000\006" +
    "\016\311\017\314\001\002\000\010\016\uff86\017\uff86\036" +
    "\uff86\001\002\000\006\062\341\067\340\001\002\000\010" +
    "\016\uff88\017\uff88\036\uff88\001\002\000\010\016\311\017" +
    "\314\036\337\001\002\000\004\067\317\001\002\000\010" +
    "\016\uff89\017\uff89\036\uff89\001\002\000\010\016\uff8a\017" +
    "\uff8a\036\uff8a\001\002\000\004\070\320\001\002\000\004" +
    "\064\321\001\002\000\004\023\322\001\002\000\004\035" +
    "\323\001\002\000\010\022\331\032\324\073\267\001\002" +
    "\000\014\022\uff91\032\uff91\036\uff91\071\uff8f\073\uff91\001" +
    "\002\000\012\022\uff8b\032\uff8b\036\uff8b\073\uff8b\001\002" +
    "\000\004\071\335\001\002\000\012\022\331\032\324\036" +
    "\333\073\267\001\002\000\014\022\uff90\032\uff90\036\uff90" +
    "\071\uff8d\073\uff90\001\002\000\014\022\uff92\032\uff92\036" +
    "\uff92\071\uff8e\073\uff92\001\002\000\012\022\uff8c\032\uff8c" +
    "\036\uff8c\073\uff8c\001\002\000\004\010\334\001\002\000" +
    "\010\016\uff94\017\uff94\036\uff94\001\002\000\012\022\uff93" +
    "\032\uff93\036\uff93\073\uff93\001\002\000\010\016\uff87\017" +
    "\uff87\036\uff87\001\002\000\052\003\uffa2\005\uffa2\006\uffa2" +
    "\007\uffa2\015\uffa2\016\uffa2\017\uffa2\020\uffa2\021\uffa2\022" +
    "\uffa2\024\uffa2\033\uffa2\036\uffa2\050\uffa2\051\uffa2\052\uffa2" +
    "\053\uffa2\054\uffa2\055\uffa2\057\uffa2\001\002\000\004\070" +
    "\351\001\002\000\004\023\342\001\002\000\010\022\344" +
    "\031\343\073\267\001\002\000\004\010\350\001\002\000" +
    "\004\010\347\001\002\000\004\010\346\001\002\000\010" +
    "\016\uff9f\017\uff9f\036\uff9f\001\002\000\010\016\uffa0\017" +
    "\uffa0\036\uffa0\001\002\000\010\016\uffa1\017\uffa1\036\uffa1" +
    "\001\002\000\004\063\352\001\002\000\004\023\353\001" +
    "\002\000\004\035\354\001\002\000\010\022\361\031\356" +
    "\073\267\001\002\000\012\022\uff95\031\uff95\036\uff95\073" +
    "\uff95\001\002\000\014\022\uff9b\031\uff9b\036\uff9b\071\uff99" +
    "\073\uff9b\001\002\000\012\022\361\031\356\036\365\073" +
    "\267\001\002\000\004\071\363\001\002\000\014\022\uff9c" +
    "\031\uff9c\036\uff9c\071\uff98\073\uff9c\001\002\000\014\022" +
    "\uff9a\031\uff9a\036\uff9a\071\uff97\073\uff9a\001\002\000\012" +
    "\022\uff9d\031\uff9d\036\uff9d\073\uff9d\001\002\000\012\022" +
    "\uff96\031\uff96\036\uff96\073\uff96\001\002\000\004\010\366" +
    "\001\002\000\010\016\uff9e\017\uff9e\036\uff9e\001\002\000" +
    "\004\030\370\001\002\000\004\035\371\001\002\000\006" +
    "\016\374\017\u0101\001\002\000\010\016\uff63\017\uff63\036" +
    "\uff63\001\002\000\010\016\uff65\017\uff65\036\uff65\001\002" +
    "\000\012\062\u0115\065\u0116\066\u0117\067\u0114\001\002\000" +
    "\010\016\uff66\017\uff66\036\uff66\001\002\000\010\016\374" +
    "\017\u0101\036\u0113\001\002\000\010\016\uff61\017\uff61\036" +
    "\uff61\001\002\000\010\016\uff64\017\uff64\036\uff64\001\002" +
    "\000\004\067\u0103\001\002\000\010\016\uff67\017\uff67\036" +
    "\uff67\001\002\000\004\070\u0104\001\002\000\004\064\u0105" +
    "\001\002\000\004\023\u0106\001\002\000\004\035\u0107\001" +
    "\002\000\010\022\u010d\032\u0108\073\267\001\002\000\014" +
    "\022\uff6e\032\uff6e\036\uff6e\071\uff6c\073\uff6e\001\002\000" +
    "\012\022\u010d\032\u0108\036\u010f\073\267\001\002\000\004" +
    "\071\u010e\001\002\000\012\022\uff68\032\uff68\036\uff68\073" +
    "\uff68\001\002\000\014\022\uff6d\032\uff6d\036\uff6d\071\uff6a" +
    "\073\uff6d\001\002\000\014\022\uff6f\032\uff6f\036\uff6f\071" +
    "\uff6b\073\uff6f\001\002\000\012\022\uff70\032\uff70\036\uff70" +
    "\073\uff70\001\002\000\004\010\u0111\001\002\000\012\022" +
    "\uff69\032\uff69\036\uff69\073\uff69\001\002\000\010\016\uff71" +
    "\017\uff71\036\uff71\001\002\000\010\016\uff62\017\uff62\036" +
    "\uff62\001\002\000\052\003\uff85\005\uff85\006\uff85\007\uff85" +
    "\015\uff85\016\uff85\017\uff85\020\uff85\021\uff85\022\uff85\024" +
    "\uff85\033\uff85\036\uff85\050\uff85\051\uff85\052\uff85\053\uff85" +
    "\054\uff85\055\uff85\057\uff85\001\002\000\004\070\u012d\001" +
    "\002\000\004\023\u0126\001\002\000\004\023\u011f\001\002" +
    "\000\004\023\u0118\001\002\000\010\022\u011a\031\u0119\073" +
    "\267\001\002\000\004\010\u011e\001\002\000\004\010\u011d" +
    "\001\002\000\004\010\u011c\001\002\000\010\016\uff7f\017" +
    "\uff7f\036\uff7f\001\002\000\010\016\uff80\017\uff80\036\uff80" +
    "\001\002\000\010\016\uff81\017\uff81\036\uff81\001\002\000" +
    "\010\022\u0121\031\u0120\073\267\001\002\000\004\010\u0125" +
    "\001\002\000\004\010\u0124\001\002\000\004\010\u0123\001" +
    "\002\000\010\016\uff7c\017\uff7c\036\uff7c\001\002\000\010" +
    "\016\uff7d\017\uff7d\036\uff7d\001\002\000\010\016\uff7e\017" +
    "\uff7e\036\uff7e\001\002\000\010\022\u0128\031\u0127\073\267" +
    "\001\002\000\004\010\u012c\001\002\000\004\010\u012b\001" +
    "\002\000\004\010\u012a\001\002\000\010\016\uff82\017\uff82" +
    "\036\uff82\001\002\000\010\016\uff83\017\uff83\036\uff83\001" +
    "\002\000\010\016\uff84\017\uff84\036\uff84\001\002\000\004" +
    "\063\u012e\001\002\000\004\023\u012f\001\002\000\004\035" +
    "\u0130\001\002\000\010\022\u0136\031\u0132\073\267\001\002" +
    "\000\012\022\u0136\031\u0132\036\u0139\073\267\001\002\000" +
    "\014\022\uff78\031\uff78\036\uff78\071\uff76\073\uff78\001\002" +
    "\000\012\022\uff72\031\uff72\036\uff72\073\uff72\001\002\000" +
    "\004\071\u0137\001\002\000\014\022\uff77\031\uff77\036\uff77" +
    "\071\uff74\073\uff77\001\002\000\014\022\uff79\031\uff79\036" +
    "\uff79\071\uff75\073\uff79\001\002\000\012\022\uff7a\031\uff7a" +
    "\036\uff7a\073\uff7a\001\002\000\012\022\uff73\031\uff73\036" +
    "\uff73\073\uff73\001\002\000\004\010\u013a\001\002\000\010" +
    "\016\uff7b\017\uff7b\036\uff7b\001\002\000\052\003\uffe5\005" +
    "\uffe5\006\uffe5\007\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5" +
    "\021\uffe5\022\uffe5\024\uffe5\033\uffe5\036\uffe5\050\uffe5\051" +
    "\uffe5\052\uffe5\053\uffe5\054\uffe5\055\uffe5\057\uffe5\001\002" +
    "\000\010\002\ufffb\006\ufffb\007\ufffb\001\002\000\004\023" +
    "\u013e\001\002\000\016\022\070\031\071\032\077\045\075" +
    "\046\073\047\072\001\002\000\020\010\u0140\022\070\031" +
    "\071\032\077\045\075\046\073\047\072\001\002\000\052" +
    "\003\uffe1\005\uffe1\006\uffe1\007\uffe1\015\uffe1\016\uffe1\017" +
    "\uffe1\020\uffe1\021\uffe1\022\uffe1\024\uffe1\033\uffe1\036\uffe1" +
    "\050\uffe1\051\uffe1\052\uffe1\053\uffe1\054\uffe1\055\uffe1\057" +
    "\uffe1\001\002\000\006\010\u0143\023\u0142\001\002\000\012" +
    "\022\162\031\u0145\032\157\075\u0146\001\002\000\052\003" +
    "\uffe4\005\uffe4\006\uffe4\007\uffe4\015\uffe4\016\uffe4\017\uffe4" +
    "\020\uffe4\021\uffe4\022\uffe4\024\uffe4\033\uffe4\036\uffe4\050" +
    "\uffe4\051\uffe4\052\uffe4\053\uffe4\054\uffe4\055\uffe4\057\uffe4" +
    "\001\002\000\012\010\uffdf\011\u014c\031\uffdf\075\uffdf\001" +
    "\002\000\012\010\uffdb\011\uffdb\031\uffdb\075\uffdb\001\002" +
    "\000\012\010\uffda\011\uffda\031\uffda\075\uffda\001\002\000" +
    "\010\010\u014b\031\u0145\075\u0146\001\002\000\010\010\u0149" +
    "\022\162\032\157\001\002\000\052\003\uffe3\005\uffe3\006" +
    "\uffe3\007\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3" +
    "\022\uffe3\024\uffe3\033\uffe3\036\uffe3\050\uffe3\051\uffe3\052" +
    "\uffe3\053\uffe3\054\uffe3\055\uffe3\057\uffe3\001\002\000\012" +
    "\010\uffe0\011\u014c\031\uffe0\075\uffe0\001\002\000\052\003" +
    "\uffe2\005\uffe2\006\uffe2\007\uffe2\015\uffe2\016\uffe2\017\uffe2" +
    "\020\uffe2\021\uffe2\022\uffe2\024\uffe2\033\uffe2\036\uffe2\050" +
    "\uffe2\051\uffe2\052\uffe2\053\uffe2\054\uffe2\055\uffe2\057\uffe2" +
    "\001\002\000\010\022\u014f\031\u014e\075\u014d\001\002\000" +
    "\012\010\uffdc\011\uffdc\031\uffdc\075\uffdc\001\002\000\012" +
    "\010\uffde\011\uffde\031\uffde\075\uffde\001\002\000\012\010" +
    "\uffdd\011\uffdd\031\uffdd\075\uffdd\001\002\000\004\025\u0151" +
    "\001\002\000\004\027\u0152\001\002\000\010\022\u0157\031" +
    "\u0153\032\157\001\002\000\014\011\uffc7\022\uffc7\030\uffc7" +
    "\031\uffc7\032\uffc7\001\002\000\022\011\170\012\166\013" +
    "\167\014\165\022\uffc6\030\uffc6\031\uffc6\032\uffc6\001\002" +
    "\000\012\022\u0157\030\u015e\031\u0153\032\157\001\002\000" +
    "\014\011\u015a\022\uffcb\030\uffcb\031\uffcb\032\uffcb\001\002" +
    "\000\022\011\u0158\012\uffce\013\uffce\014\uffce\022\uffce\030" +
    "\uffce\031\uffce\032\uffce\001\002\000\004\031\u0159\001\002" +
    "\000\014\011\uffc8\022\uffc8\030\uffc8\031\uffc8\032\uffc8\001" +
    "\002\000\006\022\u015c\031\u015b\001\002\000\014\011\uffc9" +
    "\022\uffc9\030\uffc9\031\uffc9\032\uffc9\001\002\000\014\011" +
    "\uffca\022\uffca\030\uffca\031\uffca\032\uffca\001\002\000\014" +
    "\011\u015a\022\uffcc\030\uffcc\031\uffcc\032\uffcc\001\002\000" +
    "\004\010\u015f\001\002\000\052\003\uffcd\005\uffcd\006\uffcd" +
    "\007\uffcd\015\uffcd\016\uffcd\017\uffcd\020\uffcd\021\uffcd\022" +
    "\uffcd\024\uffcd\033\uffcd\036\uffcd\050\uffcd\051\uffcd\052\uffcd" +
    "\053\uffcd\054\uffcd\055\uffcd\057\uffcd\001\002\000\010\002" +
    "\ufffe\006\010\007\004\001\002\000\012\002\ufffa\005\ufffa" +
    "\006\ufffa\007\ufffa\001\002\000\010\002\ufffd\006\010\007" +
    "\004\001\002\000\010\002\ufffc\006\010\007\004\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0161\000\014\002\010\003\011\006\005\007\004\010" +
    "\012\001\001\000\002\001\001\000\006\006\u0161\010\u0160" +
    "\001\001\000\006\007\u015f\010\012\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\046\004\033\005\026" +
    "\010\036\015\052\016\023\017\046\022\060\023\032\024" +
    "\025\026\034\027\020\030\040\034\057\035\043\051\055" +
    "\065\021\077\042\101\054\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\004\111\010\036\015" +
    "\052\016\023\017\046\022\060\023\032\024\025\026\034" +
    "\027\020\030\040\034\057\035\043\051\055\065\021\077" +
    "\042\101\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\100\227\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\013\073\014\077\076\075\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\135\001\001\000" +
    "\004\013\134\001\001\000\002\001\001\000\004\013\113" +
    "\001\001\000\006\013\073\014\100\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\025\102" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\046\004\033" +
    "\005\110\010\036\015\052\016\023\017\046\022\060\023" +
    "\032\024\025\026\034\027\020\030\040\034\057\035\043" +
    "\051\055\065\021\077\042\101\054\001\001\000\044\004" +
    "\111\010\036\015\052\016\023\017\046\022\060\023\032" +
    "\024\025\026\034\027\020\030\040\034\057\035\043\051" +
    "\055\065\021\077\042\101\054\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\127\001" +
    "\001\000\004\013\126\001\001\000\004\013\125\001\001" +
    "\000\004\013\124\001\001\000\004\013\123\001\001\000" +
    "\004\013\122\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\133\001\001\000\004\013\132" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\013\073\014\077\076\137" +
    "\001\001\000\006\013\073\014\100\001\001\000\002\001" +
    "\001\000\046\004\033\005\142\010\036\015\052\016\023" +
    "\017\046\022\060\023\032\024\025\026\034\027\020\030" +
    "\040\034\057\035\043\051\055\065\021\077\042\101\054" +
    "\001\001\000\044\004\111\010\036\015\052\016\023\017" +
    "\046\022\060\023\032\024\025\026\034\027\020\030\040" +
    "\034\057\035\043\051\055\065\021\077\042\101\054\001" +
    "\001\000\002\001\001\000\002\001\001\000\046\004\033" +
    "\005\146\010\036\015\052\016\023\017\046\022\060\023" +
    "\032\024\025\026\034\027\020\030\040\034\057\035\043" +
    "\051\055\065\021\077\042\101\054\001\001\000\044\004" +
    "\111\010\036\015\052\016\023\017\046\022\060\023\032" +
    "\024\025\026\034\027\020\030\040\034\057\035\043\051" +
    "\055\065\021\077\042\101\054\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\013\073\014\077\076\152\001" +
    "\001\000\006\013\073\014\100\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\011\157\012\160\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\163\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\173\001\001\000\004\011\172\001\001\000\004" +
    "\011\171\001\001\000\004\011\170\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\013\073\014\077\076\175\001\001\000\006\013" +
    "\073\014\100\001\001\000\002\001\001\000\046\004\033" +
    "\005\200\010\036\015\052\016\023\017\046\022\060\023" +
    "\032\024\025\026\034\027\020\030\040\034\057\035\043" +
    "\051\055\065\021\077\042\101\054\001\001\000\044\004" +
    "\111\010\036\015\052\016\023\017\046\022\060\023\032" +
    "\024\025\026\034\027\020\030\040\034\057\035\043\051" +
    "\055\065\021\077\042\101\054\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\031\207\033\211\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\031\212\032\213\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\046\004\033\005\216\010\036\015\052\016\023\017" +
    "\046\022\060\023\032\024\025\026\034\027\020\030\040" +
    "\034\057\035\043\051\055\065\021\077\042\101\054\001" +
    "\001\000\044\004\111\010\036\015\052\016\023\017\046" +
    "\022\060\023\032\024\025\026\034\027\020\030\040\034" +
    "\057\035\043\051\055\065\021\077\042\101\054\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\046\004\033\005\223\010\036\015\052\016\023\017\046" +
    "\022\060\023\032\024\025\026\034\027\020\030\040\034" +
    "\057\035\043\051\055\065\021\077\042\101\054\001\001" +
    "\000\044\004\111\010\036\015\052\016\023\017\046\022" +
    "\060\023\032\024\025\026\034\027\020\030\040\034\057" +
    "\035\043\051\055\065\021\077\042\101\054\001\001\000" +
    "\046\004\033\005\225\010\036\015\052\016\023\017\046" +
    "\022\060\023\032\024\025\026\034\027\020\030\040\034" +
    "\057\035\043\051\055\065\021\077\042\101\054\001\001" +
    "\000\044\004\111\010\036\015\052\016\023\017\046\022" +
    "\060\023\032\024\025\026\034\027\020\030\040\034\057" +
    "\035\043\051\055\065\021\077\042\101\054\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\013\073\014\077\076\233\001\001\000" +
    "\006\013\073\014\100\001\001\000\002\001\001\000\046" +
    "\004\033\005\236\010\036\015\052\016\023\017\046\022" +
    "\060\023\032\024\025\026\034\027\020\030\040\034\057" +
    "\035\043\051\055\065\021\077\042\101\054\001\001\000" +
    "\044\004\111\010\036\015\052\016\023\017\046\022\060" +
    "\023\032\024\025\026\034\027\020\030\040\034\057\035" +
    "\043\051\055\065\021\077\042\101\054\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\013\073\014\077\076" +
    "\242\001\001\000\006\013\073\014\100\001\001\000\002" +
    "\001\001\000\046\004\033\005\245\010\036\015\052\016" +
    "\023\017\046\022\060\023\032\024\025\026\034\027\020" +
    "\030\040\034\057\035\043\051\055\065\021\077\042\101" +
    "\054\001\001\000\044\004\111\010\036\015\052\016\023" +
    "\017\046\022\060\023\032\024\025\026\034\027\020\030" +
    "\040\034\057\035\043\051\055\065\021\077\042\101\054" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\066\262\067\257\071\256\001" +
    "\001\000\006\066\303\067\257\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\070\267\074\271\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\036\307\037\315\040\312\041\314\045\311" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\036\335\037\315\041\314\045\311\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\046\326\047\324\050\325\074\327\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\047\331\050\325\074\327\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\074\344\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\042\356\043\354\044\357\074\361\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\043\363\044" +
    "\357\074\361\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\052\u0101\053\377\057\371\063\376\064" +
    "\375\072\374\073\372\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\052" +
    "\u0101\053\377\057\371\063\u0111\072\374\073\372\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\060\u010a\061\u0109\062" +
    "\u0108\074\u010b\001\001\000\002\001\001\000\010\060\u010f" +
    "\061\u0109\074\u010b\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\074" +
    "\u011a\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\074\u0121\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\074\u0128\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\054\u0132\055" +
    "\u0133\056\u0130\074\u0134\001\001\000\010\054\u0137\055\u0133" +
    "\074\u0134\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\013\073\014\077\076\u013e\001\001\000\006\013" +
    "\073\014\100\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\011\157\012\u0147\075\u0143\102\u0146\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\075\u0149\001\001\000\004\011\163\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\011\u0153\020\u0154\021\u0155\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\011\u0153\021\u015c\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\u0160\001\001\000\002\001\001\000\006\007\u0162" +
    "\010\012\001\001\000\004\010\u0160\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$analisis_sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$analisis_sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$analisis_sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  
    public static LinkedList<TError> TablaES = new LinkedList<TError>();
    public static LinkedList<String> python = new LinkedList<String>();

    // Listas para pie graph
    public static LinkedList<String> ejex_pie = new LinkedList<String>();
    public static LinkedList<String> valores_pie = new LinkedList<String>();
    public static String titulo_pie_graph="";
     
    // Listas para bar graph
    public static LinkedList<String> ejex_bar = new LinkedList<String>();
    public static LinkedList<String> valores_bar = new LinkedList<String>();
    public static String titulo_bar_graph="";
    public static String tituloX_bar="";
    public static String tituloY_bar="";

    // Variables globales statpy
    public static Hashtable<String, String> tabla_globales = new Hashtable<>();

    // Variable JSON
    public static Hashtable<String, LinkedList<Tokens>> json_data = new Hashtable<>();

    // variable de tabulacion
    int tab_n = 1;
    
//--------------------------------------------------------------------------------------------------

    public void test(Hashtable<String, LinkedList<Tokens>> tabla ){
        System.out.println("Holi");
        json_data = tabla;
        //System.out.println(json_data.get("archivo1.json"));
    }

//--------------------------------------------------------------------------------------------------
    public String indentation(int a){
        String tab="";
        for(int i = 0; i < a;i++ ){
            tab = tab + "       ";
        }
        
        return tab;
    }

    public String indentar(String str){
        
        String[] stringArray = str.split("\n");
        
        String resultado = "";
        for(int i = 0; i<stringArray.length;i++){
            resultado += indentation(tab_n) + stringArray[i] + "\n";
        }
        return resultado;

        //System.out.println(resultado);
    }
//--------------------------------------------------------------------------------------------------

    // Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s){

        String lexema = s.value.toString();
        int fila = s.right+1;
        int columna = s.left+1;

        System.out.println("!!! Error Sintactico Recuperado");
        System.out.println("\t\tLexema: " + lexema);
        System.out.println("\t\tFila: " + fila);
        System.out.println("\t\tColumna: " + columna);

        TError datos = new TError(lexema ,"Error Sintactico" ,fila,columna);
        TablaES.add(datos);
    }

    // Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        String lexema = s.value.toString();
        int fila = s.right+1;
        int columna = s.left+1;

        System.out.println("!!! Error Sintactico, Panic Mode");
        System.out.println("\t\tLexema: " + lexema);
        System.out.println("\t\tFila: " + fila);
        System.out.println("\t\tColumna: " + columna);

        TError datos = new TError(lexema ,"Error Sintactico" ,fila,columna);
        TablaES.add(datos);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$analisis_sintactico$actions {



  private final analisis_sintactico parser;

  /** Constructor */
  CUP$analisis_sintactico$actions(analisis_sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$analisis_sintactico$do_action_part00000000(
    int                        CUP$analisis_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$analisis_sintactico$parser,
    java.util.Stack            CUP$analisis_sintactico$stack,
    int                        CUP$analisis_sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$analisis_sintactico$result;

      /* select the action based on the action number */
      switch (CUP$analisis_sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		RESULT = start_val;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$analisis_sintactico$parser.done_parsing();
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= PROGRAM 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PROGRAM ::= MAIN 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("PROGRAM",1, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PROGRAM ::= MAIN CMTS 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("PROGRAM",1, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // PROGRAM ::= CMTS MAIN 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("PROGRAM",1, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // PROGRAM ::= CMTS MAIN CMTS 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("PROGRAM",1, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // MAIN ::= reservada_void reservada_main open_pare close_pare open_brace STMSLIST close_brace 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		  
        //indentar(a);
        python.add("def main (): \n" + indentar(a) + "\nif__name__ = \"__main__\": \n main()" + "\n"); tab_n--;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("MAIN",4, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CMTS ::= CMTS CMT 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CMTS",5, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CMTS ::= CMT 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CMTS",5, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CMT ::= multi_comentario 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CMT",6, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CMT ::= comentario 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CMT",6, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // STMS ::= PRINT_STMT 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT = (a); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STMS",2, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // STMS ::= DECLARATION_STMT 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT = (a); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STMS",2, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // STMS ::= DECLA_LE 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT = (a); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STMS",2, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // STMS ::= IF_STM 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT = (a); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STMS",2, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // STMS ::= SWITCH_STMT 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT = (a); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STMS",2, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // STMS ::= FOR_STMT 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT = (a); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STMS",2, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // STMS ::= WHILE_STMT 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT = (a); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STMS",2, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // STMS ::= DO_STMT 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT = (a); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STMS",2, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // STMS ::= ASIG 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT = (a); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STMS",2, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // STMS ::= CMT 
            {
              String RESULT =null;
		 RESULT = "";  
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STMS",2, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // STMS ::= G_PIE 
            {
              String RESULT =null;
		 RESULT = "";  
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STMS",2, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // STMS ::= G_BAR 
            {
              String RESULT =null;
		 RESULT = "";  
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STMS",2, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // STMS ::= DEF_GLOBAL 
            {
              String RESULT =null;
		 RESULT = "";  
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STMS",2, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // STMS ::= BREAK_STM 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT = (a); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STMS",2, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // STMS ::= error punto_coma 
            {
              String RESULT =null;
		
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STMS",2, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // STMSLIST ::= STMSLIST STMS 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = a + b ; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STMSLIST",3, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // STMSLIST ::= STMS 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = a; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STMSLIST",3, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // BREAK_STM ::= reservada_break punto_coma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		RESULT = a; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BREAK_STM",63, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARATION_STMT ::= TIPOS_DATOS id punto_coma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		 RESULT = a + " = None"+ "\n"; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARATION_STMT",11, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARATION_STMT ::= TIPOS_DATOS id igual ME punto_coma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		 RESULT = a + " = " + b + "\n"; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARATION_STMT",11, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARATION_STMT ::= TIPOS_DATOS id igual LSTS_STRING punto_coma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		 RESULT = a + " = " + b + "\n"; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARATION_STMT",11, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLA_LE ::= reservada_bool id igual LE punto_coma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		 RESULT = a + " = " + b + "\n"; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("DECLA_LE",61, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // LSTS_STRING ::= LSTS_STRING LST_STRING 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT = a + b; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("LSTS_STRING",64, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // LSTS_STRING ::= LST_STRING 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT = a ; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("LSTS_STRING",64, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // LST_STRING ::= LST_STRING Simbolo_mas string_literal 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT = a + " + " + b ; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("LST_STRING",59, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LST_STRING ::= LST_STRING Simbolo_mas id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT = a + " + " + b ; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("LST_STRING",59, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // LST_STRING ::= LST_STRING Simbolo_mas char_er 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT = a + " + " + b ; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("LST_STRING",59, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // LST_STRING ::= string_literal 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("LST_STRING",59, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // LST_STRING ::= char_er 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("LST_STRING",59, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TIPOS_DATOS ::= reservada_int 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPOS_DATOS",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TIPOS_DATOS ::= reservada_string 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPOS_DATOS",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TIPOS_DATOS ::= reservada_double 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPOS_DATOS",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TIPOS_DATOS ::= reservada_char 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPOS_DATOS",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ME ::= ME E 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT = a + b; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("ME",8, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ME ::= E 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("ME",8, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // E ::= E Simbolo_mas E 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT = a + " + " + b; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("E",7, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // E ::= E Simbolo_menos E 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT = a + " - " + b; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("E",7, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // E ::= E Simbolo_multi E 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT = a + " * " + b; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("E",7, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // E ::= E Simbolo_divi E 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT = a + " / " + b; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("E",7, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // E ::= numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("E",7, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // E ::= id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("E",7, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // PRINT_STMT ::= reservada_console dot reservada_write open_pare ARGS close_pare punto_coma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;
		 RESULT = "print(" + a + ")" + "\n"; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("PRINT_STMT",13, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ARGS ::= ARGS ARG 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT = a + b; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("ARGS",14, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ARGS ::= ARG 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("ARGS",14, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ARG ::= ARG Simbolo_mas id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT = a + " , " + b; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("ARG",15, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ARG ::= ARG Simbolo_mas string_literal 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT = a + " , " + b; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("ARG",15, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ARG ::= id Simbolo_mas string_literal 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT = a + " , " + b; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("ARG",15, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ARG ::= string_literal 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("ARG",15, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ARG ::= E 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("ARG",15, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // IF_STM ::= IF_S0 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT =  a; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("IF_STM",16, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // IF_STM ::= IF_S0 ELSE_IFSTM 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT =  a + b; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("IF_STM",16, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ELSE_IFSTM ::= ELSE_IFSTM reservada_else reservada_if open_pare LE close_pare open_brace STMSLIST close_brace 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-8)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		 RESULT = a + "else if " + b + ":" + "\n" + indentar(c) ;   
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("ELSE_IFSTM",62, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ELSE_IFSTM ::= reservada_else reservada_if open_pare LE close_pare open_brace STMSLIST close_brace 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		 RESULT = "else if " + a + ":" + "\n" + indentar(b) ;   
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("ELSE_IFSTM",62, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ELSE_IFSTM ::= reservada_else reservada_if open_pare LE close_pare open_brace close_brace 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).value;
		 RESULT = "else if " + a + ":" + "\n" ;   
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("ELSE_IFSTM",62, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // IF_S0 ::= reservada_if open_pare LE close_pare open_brace STMSLIST close_brace 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		 RESULT = "if " + a  + " : " + " \n" + indentar(b) ; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("IF_S0",17, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // IF_S0 ::= reservada_if open_pare LE close_pare open_brace close_brace 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).value;
		 RESULT = "if " + a  + " : " + " \n" ; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("IF_S0",17, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // R ::= R mayor R 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT = a + " > " + b; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("R",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // R ::= R menor R 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT = a + " < " + b; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("R",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // R ::= R mayor_igual R 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT = a + " >= " + b; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("R",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // R ::= R menor_igual R 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT = a + " <= " + b; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("R",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // R ::= R igual_relacional R 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT = a + " == " + b; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("R",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // R ::= R distinto R 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT = a + " != " + b; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("R",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // R ::= numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("R",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // R ::= id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("R",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // R ::= string_literal 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("R",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // L ::= R and R 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT = a + " && " + b; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("L",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // L ::= R or R 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT = a + " || " + b; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("L",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // L ::= not R 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT = " ! " + a; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("L",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // L ::= R 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("L",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // L ::= and R 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT = " && " + a; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("L",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // L ::= or R 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT = " || " + a; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("L",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // LE ::= LE L 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT = a + b; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("LE",60, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // LE ::= L 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("LE",60, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // FOR_STMT ::= reservada_for open_pare reservada_int id igual numero punto_coma LE punto_coma UPDATE close_pare open_brace STMSLIST close_brace 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-10)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-8)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-6)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		
            int val1 = Integer.parseInt(b) + 1;                             // add 1 to the initial number
            String [] arrOfStr = c.split("< | > | <= | >= | == | != ", 0); // split array and get the last value
            RESULT = "for " + a + " in range(" + val1 + "," + arrOfStr[arrOfStr.length-1] + "):\n" + indentar(d) ;
        
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FOR_STMT",18, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-13)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // UPDATE ::= id Simbolo_mas Simbolo_mas 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("UPDATE",19, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // WHILE_STMT ::= reservada_while open_pare LE close_pare open_brace STMSLIST close_brace 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		 RESULT = "while " +  a + " : \n" + indentar(b) ; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("WHILE_STMT",20, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // DO_STMT ::= reservada_do open_brace STMSLIST close_brace reservada_while open_pare LE close_pare punto_coma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;
		RESULT = "while True:\n " + indentar(a) + "if(" + b + "):\n"+ "break\n"; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("DO_STMT",21, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // SWITCH_STMT ::= reservada_switch open_pare id close_pare open_brace CASE_LIST DEFAULT_CASE close_brace 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		 RESULT = "def switch(case, " + a + "): \n" + "switcher = {\n" + b + c + "} \n"   ; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("SWITCH_STMT",22, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // CASE_LIST ::= CASE_LIST CASE_STATEMENT 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = a + b; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CASE_LIST",25, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CASE_LIST ::= CASE_STATEMENT 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = a; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CASE_LIST",25, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // CASE_STATEMENT ::= reservada_case numero dos_puntos STMSLIST 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT = indentar(a + " : \n" + indentar(b) + ", "); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CASE_STATEMENT",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // CASE_STATEMENT ::= reservada_case string_literal dos_puntos STMSLIST 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT = indentar(a + " : \n" + indentar(b) + ", "); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CASE_STATEMENT",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // DEFAULT_CASE ::= reservada_default dos_puntos STMSLIST 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT = indentar("n : \n" + indentar(a) ) ; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("DEFAULT_CASE",24, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ASIG ::= id igual ME punto_coma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		 RESULT = a + " = " + b + "\n"; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("ASIG",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // G_PIE ::= reservada_void reservada_graficapie open_pare close_pare open_brace STMSLIST_PIE close_brace 
            {
              String RESULT =null;
		System.out.println("una grafica pie");
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("G_PIE",27, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // TITULO_PIE ::= reservada_string reservada_titulo igual string_literal punto_coma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		 titulo_pie_graph = a; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TITULO_PIE",29, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // TITULO_PIE ::= reservada_string reservada_titulo igual id punto_coma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		
                        if(tabla_globales.containsKey(a)){
                            String val = tabla_globales.get(a);
                            titulo_pie_graph = val;
                        }else {
                            System.out.println("ERROR: No se declaro la variable: " + a);
                        }
                    
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TITULO_PIE",29, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // TITULO_PIE ::= reservada_string reservada_titulo igual JSON_VAL punto_coma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		 titulo_pie_graph = a; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TITULO_PIE",29, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EJEX ::= reservada_string open_square_brackets close_square_brackets reservada_ejex igual open_brace ARGS_EJEX close_brace punto_coma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;
		 System.out.println(a); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EJEX",31, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ARG_EJEX ::= DATO coma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		 RESULT = a; ejex_pie.add(a); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("ARG_EJEX",33, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ARG_EJEX ::= id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 //RESULT = a; ejex_pie.add(a); 
                                    if(tabla_globales.containsKey(a)){
                                        String val = tabla_globales.get(a); ejex_pie.add(val); 
                                    }else {
                                        System.out.println("ERROR: No se declaro la variable: " + a);
                                    }
                                
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("ARG_EJEX",33, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ARG_EJEX ::= string_literal 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT = a; ejex_pie.add(a); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("ARG_EJEX",33, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ARG_EJEX ::= JSON_VAL 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT = a; ejex_pie.add(a); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("ARG_EJEX",33, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // DATO ::= string_literal 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT = a; //ejex_pie.add(a); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("DATO",34, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // DATO ::= id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 
                                    if(tabla_globales.containsKey(a)){
                                        String val = tabla_globales.get(a); RESULT = val; 
                                    }else {
                                        System.out.println("ERROR: No se declaro la variable: " + a);
                                    }
                                
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("DATO",34, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // DATO ::= JSON_VAL 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT = a;  
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("DATO",34, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ARGS_EJEX ::= ARGS_EJEX ARG_EJEX 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT = a + b;  
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("ARGS_EJEX",32, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ARGS_EJEX ::= ARG_EJEX 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT = a;      
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("ARGS_EJEX",32, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // VALOR ::= reservada_double open_square_brackets close_square_brackets reservada_valores igual open_brace ARGS_VALOR close_brace punto_coma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;
		System.out.println("var valor "); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",35, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ARG_VALOR ::= DATO_VALOR coma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		 RESULT = a; valores_pie.add(a); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("ARG_VALOR",37, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ARG_VALOR ::= id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 //RESULT = a; valores_pie.add(a); 
                                        if(tabla_globales.containsKey(a)){
                                            String val = tabla_globales.get(a); valores_pie.add(val); 
                                        }else {
                                            System.out.println("ERROR: No se declaro la variable: " + a);
                                        }
                                    
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("ARG_VALOR",37, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ARG_VALOR ::= numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT = a; valores_pie.add(a); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("ARG_VALOR",37, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ARG_VALOR ::= JSON_VAL 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT = a; valores_pie.add(a); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("ARG_VALOR",37, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // DATO_VALOR ::= numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("DATO_VALOR",38, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // DATO_VALOR ::= id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 
                                        if(tabla_globales.containsKey(a)){
                                            String val = tabla_globales.get(a); RESULT = val; 
                                        }else {
                                            System.out.println("ERROR: No se declaro la variable: " + a);
                                        }
                                    
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("DATO_VALOR",38, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // DATO_VALOR ::= JSON_VAL 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT = a;  
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("DATO_VALOR",38, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // ARGS_VALOR ::= ARGS_VALOR ARG_VALOR 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT = a + b; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("ARGS_VALOR",36, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // ARGS_VALOR ::= ARG_VALOR 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("ARGS_VALOR",36, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // STMS_PIE ::= TITULO_PIE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STMS_PIE",28, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // STMS_PIE ::= EJEX 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STMS_PIE",28, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // STMS_PIE ::= VALOR 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STMS_PIE",28, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // STMSLIST_PIE ::= STMSLIST_PIE STMS_PIE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STMSLIST_PIE",30, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // STMSLIST_PIE ::= STMS_PIE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STMSLIST_PIE",30, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // G_BAR ::= reservada_void reservada_graficabarras open_pare close_pare open_brace STMSLIST_BAR close_brace 
            {
              String RESULT =null;
		System.out.println("--------- GRAFICA DE BARRAS ---------");
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("G_BAR",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // TITULO_BAR ::= reservada_string reservada_titulo igual string_literal punto_coma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		 titulo_bar_graph = a; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TITULO_BAR",40, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // TITULO_BAR ::= reservada_string reservada_titulo igual id punto_coma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		
                                            if(tabla_globales.containsKey(a)){
                                                String val = tabla_globales.get(a);
                                                titulo_bar_graph = val;
                                            }else {
                                                System.out.println("ERROR: No se declaro la variable: " + a);
                                            }
                                        
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TITULO_BAR",40, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // TITULO_BAR ::= reservada_string reservada_titulo igual JSON_VAL punto_coma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		 titulo_bar_graph = a; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TITULO_BAR",40, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // TITULO_X ::= reservada_string reservada_titulox igual string_literal punto_coma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		 tituloX_bar = a; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TITULO_X",56, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // TITULO_X ::= reservada_string reservada_titulox igual id punto_coma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		
                                            if(tabla_globales.containsKey(a)){
                                                String val = tabla_globales.get(a);
                                                tituloX_bar = val;
                                            }else {
                                                System.out.println("ERROR: No se declaro la variable: " + a);
                                            }
                                        
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TITULO_X",56, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // TITULO_X ::= reservada_string reservada_titulox igual JSON_VAL punto_coma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		 tituloX_bar = a; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TITULO_X",56, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // TITULO_Y ::= reservada_string reservada_tituloy igual string_literal punto_coma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		 tituloY_bar = a; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TITULO_Y",57, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // TITULO_Y ::= reservada_string reservada_tituloy igual id punto_coma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		
                                            if(tabla_globales.containsKey(a)){
                                                String val = tabla_globales.get(a);
                                                tituloY_bar = val;
                                            }else {
                                                System.out.println("ERROR: No se declaro la variable: " + a);
                                            }
                                        
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TITULO_Y",57, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // TITULO_Y ::= reservada_string reservada_tituloy igual JSON_VAL punto_coma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		 tituloY_bar = a; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TITULO_Y",57, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // EJEX_BAR ::= reservada_string open_square_brackets close_square_brackets reservada_ejex igual open_brace ARGS_EJEX_BAR close_brace punto_coma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;
		 //System.out.println(a); //ejex_bar.add(a); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EJEX_BAR",41, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // ARG_EJEX_BAR ::= DATO_BAR coma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		 ejex_bar.add(a); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("ARG_EJEX_BAR",42, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // ARG_EJEX_BAR ::= id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 
                                            if(tabla_globales.containsKey(a)){
                                                String val = tabla_globales.get(a); ejex_bar.add(val); 
                                            }else {
                                                System.out.println("ERROR: No se declaro la variable: " + a);
                                            }
                                        
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("ARG_EJEX_BAR",42, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // ARG_EJEX_BAR ::= string_literal 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT = a; ejex_bar.add(a); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("ARG_EJEX_BAR",42, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // ARG_EJEX_BAR ::= JSON_VAL 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT = a; ejex_bar.add(a); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("ARG_EJEX_BAR",42, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // DATO_BAR ::= string_literal 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("DATO_BAR",43, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // DATO_BAR ::= id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		  
                                            if(tabla_globales.containsKey(a)){
                                                String val = tabla_globales.get(a); RESULT = val; 
                                            }else {
                                                System.out.println("ERROR: No se declaro la variable: " + a);
                                            }
                                        
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("DATO_BAR",43, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // DATO_BAR ::= JSON_VAL 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT = a;  
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("DATO_BAR",43, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // ARGS_EJEX_BAR ::= ARGS_EJEX_BAR ARG_EJEX_BAR 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("ARGS_EJEX_BAR",44, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // ARGS_EJEX_BAR ::= ARG_EJEX_BAR 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("ARGS_EJEX_BAR",44, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // VALOR_BAR ::= reservada_double open_square_brackets close_square_brackets reservada_valores igual open_brace ARGS_VALOR_BAR close_brace punto_coma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;
		System.out.println("var valor "); //valores_pie.add(a); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VALOR_BAR",45, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // ARG_VALOR_BAR ::= DATO_VALOR_BAR coma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		 RESULT = a; valores_bar.add(a); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("ARG_VALOR_BAR",46, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // ARG_VALOR_BAR ::= id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 //RESULT = a; valores_bar.add(a);
                                                    if(tabla_globales.containsKey(a)){
                                                        String val = tabla_globales.get(a); valores_bar.add(val); 
                                                    }else {
                                                        System.out.println("ERROR: No se declaro la variable: " + a);
                                                    }
                                                
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("ARG_VALOR_BAR",46, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // ARG_VALOR_BAR ::= numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT = a; valores_bar.add(a); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("ARG_VALOR_BAR",46, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // ARG_VALOR_BAR ::= JSON_VAL 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT = a; valores_bar.add(a); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("ARG_VALOR_BAR",46, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // DATO_VALOR_BAR ::= numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT = a;  
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("DATO_VALOR_BAR",47, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // DATO_VALOR_BAR ::= id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 
                                                if(tabla_globales.containsKey(a)){
                                                    String val = tabla_globales.get(a); RESULT = val; 
                                                }else {
                                                    System.out.println("ERROR: No se declaro la variable: " + a);
                                                }
                                            
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("DATO_VALOR_BAR",47, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // DATO_VALOR_BAR ::= JSON_VAL 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT = a;  
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("DATO_VALOR_BAR",47, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // ARGS_VALOR_BAR ::= ARGS_VALOR_BAR ARG_VALOR_BAR 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT = a + b; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("ARGS_VALOR_BAR",48, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // ARGS_VALOR_BAR ::= ARG_VALOR_BAR 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("ARGS_VALOR_BAR",48, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // STMS_BAR ::= TITULO_BAR 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STMS_BAR",49, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // STMS_BAR ::= TITULO_X 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STMS_BAR",49, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // STMS_BAR ::= TITULO_Y 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STMS_BAR",49, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // STMS_BAR ::= EJEX_BAR 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STMS_BAR",49, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // STMS_BAR ::= VALOR_BAR 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STMS_BAR",49, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // STMSLIST_BAR ::= STMSLIST_BAR STMS_BAR 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STMSLIST_BAR",50, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // STMSLIST_BAR ::= STMS_BAR 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STMSLIST_BAR",50, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // DEF_GLOBAL ::= reservada_void reservada_definirglobales open_pare close_pare open_brace DEF_LIST close_brace 
            {
              String RESULT =null;
		System.out.println("Metodo definir globales");
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("DEF_GLOBAL",51, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // DEF_VAR ::= TD_DEF id igual VAL_DEF punto_coma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		 tabla_globales.put(a,b); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("DEF_VAR",52, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // TD_DEF ::= reservada_string 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TD_DEF",53, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // TD_DEF ::= reservada_double 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TD_DEF",53, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // VAL_DEF ::= string_literal 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT = a;  
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAL_DEF",54, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // VAL_DEF ::= numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT = a;  
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAL_DEF",54, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // VAL_DEF ::= JSON_VAL 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT = a;  
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAL_DEF",54, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // DEF_LIST ::= DEF_LIST DEF_VAR 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("DEF_LIST",55, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // DEF_LIST ::= DEF_VAR 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("DEF_LIST",55, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // JSON_VAL ::= dollar open_brace reservada_newvalor coma string_literal coma string_literal close_brace 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		 
                    // split string to take off qoutes, " qoutes " [1]
                    String[] json_name = a.split("\"",5);
                    for(int i = 0; i < json_data.get(json_name[1]).size(); i++){
                        if(json_data.get(json_name[1]).get(i).getLexema().equals(b) ) {
                            System.out.println("FLAG: holi" );
                            String val = json_data.get(json_name[1]).get(i+2).getLexema();
                            System.out.println(json_data.get(json_name[1]).get(i+2).getLexema());
                            RESULT = val;
                            break;
                        }else{
                              System.out.println(a + "  NO EXISTE EN:  " + b );
                        }
                    }

                    
                
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("JSON_VAL",58, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$analisis_sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$analisis_sintactico$do_action(
    int                        CUP$analisis_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$analisis_sintactico$parser,
    java.util.Stack            CUP$analisis_sintactico$stack,
    int                        CUP$analisis_sintactico$top)
    throws java.lang.Exception
    {
              return CUP$analisis_sintactico$do_action_part00000000(
                               CUP$analisis_sintactico$act_num,
                               CUP$analisis_sintactico$parser,
                               CUP$analisis_sintactico$stack,
                               CUP$analisis_sintactico$top);
    }
}

}
