/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import java.awt.Color;
import Analizadores.*;
import java.awt.Desktop;
import java.io.*;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.LinkedList;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.PiePlot3D;
import org.jfree.data.general.DefaultPieDataset;

/**
 *
 * @author mathew
 */
public class user_interface extends javax.swing.JFrame {

    /**
     * Creates new form user_interface
     */
    public user_interface() {
        initComponents();
        this.setLocationRelativeTo(null);
        btn_tog.setSelected(true);
        btn_tog.setText("StatPy");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        label_analyzer = new javax.swing.JLabel();
        btn_tog = new javax.swing.JToggleButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        text_entrada = new javax.swing.JTextPane();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        text_salida = new javax.swing.JTextArea();
        jButton2 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        open_file_menu = new javax.swing.JMenuItem();
        save_menu = new javax.swing.JMenuItem();
        save_as_menu = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        html_tokens_STATPY = new javax.swing.JMenuItem();
        html_errores_STATPY = new javax.swing.JMenuItem();
        html_tokens_JSON = new javax.swing.JMenuItem();
        html_errores_JSON = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("PROYECTO 1");
        setMaximumSize(new java.awt.Dimension(2147483647, 900));
        setPreferredSize(new java.awt.Dimension(1000, 800));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("Entrada:");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setText("Salida:");

        label_analyzer.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        label_analyzer.setText("Analizador: StatPy");

        btn_tog.setText("Analizador");
        btn_tog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_togActionPerformed(evt);
            }
        });

        jScrollPane3.setViewportView(text_entrada);

        jButton1.setText("Ejecutar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        text_salida.setEditable(false);
        text_salida.setBackground(new java.awt.Color(51, 51, 51));
        text_salida.setColumns(20);
        text_salida.setForeground(new java.awt.Color(255, 255, 255));
        text_salida.setRows(5);
        jScrollPane1.setViewportView(text_salida);

        jButton2.setText("piechart");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jMenuBar1.setMaximumSize(new java.awt.Dimension(98, 300));

        jMenu1.setText("Archivo");

        open_file_menu.setText("Abrir Archivo");
        open_file_menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                open_file_menuActionPerformed(evt);
            }
        });
        jMenu1.add(open_file_menu);

        save_menu.setText("Guardar");
        save_menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                save_menuActionPerformed(evt);
            }
        });
        jMenu1.add(save_menu);

        save_as_menu.setText("Guardar Como");
        save_as_menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                save_as_menuActionPerformed(evt);
            }
        });
        jMenu1.add(save_as_menu);

        jMenuBar1.add(jMenu1);

        jMenu4.setText("Reporte");

        html_tokens_STATPY.setText("Tokens_STATPY");
        html_tokens_STATPY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                html_tokens_STATPYActionPerformed(evt);
            }
        });
        jMenu4.add(html_tokens_STATPY);

        html_errores_STATPY.setText("Errores_STATPY");
        html_errores_STATPY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                html_errores_STATPYActionPerformed(evt);
            }
        });
        jMenu4.add(html_errores_STATPY);

        html_tokens_JSON.setText("Tokens_JSON");
        html_tokens_JSON.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                html_tokens_JSONActionPerformed(evt);
            }
        });
        jMenu4.add(html_tokens_JSON);

        html_errores_JSON.setText("Errores_JSON");
        html_errores_JSON.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                html_errores_JSONActionPerformed(evt);
            }
        });
        jMenu4.add(html_errores_JSON);

        jMenuBar1.add(jMenu4);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btn_tog)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton2))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(label_analyzer)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 447, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 465, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_tog)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label_analyzer)
                    .addComponent(jButton1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 482, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 474, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(612, 612, 612))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    String path_current_file="";
    private void open_file_menuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_open_file_menuActionPerformed
        // TODO add your handling code here:

        try{
            JFileChooser fileChooser = new JFileChooser();
            //  Seteando filtros del programa en especifico
            FileNameExtensionFilter filter = new FileNameExtensionFilter("Compi 1 archivos SP y JSON", "sp","json");
            fileChooser.setFileFilter(filter);
            
            // Donde se abre por defecto 
            fileChooser.setCurrentDirectory(new File("."));
            
            // Enum del resultado, si es OK, o cancel o lo que presione el usuario
            int result = fileChooser.showOpenDialog(null);
            
            System.out.println("Result: " +  result);
            
            if(result == JFileChooser.APPROVE_OPTION){
                File selectedFile = new File(fileChooser.getSelectedFile().getAbsolutePath());
                System.out.println("ruta: " + selectedFile);
                path_current_file = String.valueOf(selectedFile);
                
                FileReader reader = new FileReader(selectedFile);
                BufferedReader br = new BufferedReader(reader);
                text_entrada.read(br,null);
                br.close();
                text_entrada.requestFocus();
                
            }else if (result == JFileChooser.CANCEL_OPTION){
                System.out.println("se cancelo el puerto :( ");
            }
            
            
            
        }catch (Exception e){
            System.out.println(e);
            System.out.println("Error tratando de abrir archivo, file chooser");
        }
    }//GEN-LAST:event_open_file_menuActionPerformed

    private void html_tokens_STATPYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_html_tokens_STATPYActionPerformed
        // TODO add your handling code here:
        String ruta = "C:\\Users\\mathew\\Documents\\NetBeansProjects\\[OLC1]Proyecto1_201602755\\Tabla_de_tokens.html";
        abrir_html(ruta);
    }//GEN-LAST:event_html_tokens_STATPYActionPerformed

    private void abrir_html(String ruta) {
        try {
            File file = new File(ruta);
            Desktop.getDesktop().browse(file.toURI());
        } catch (Exception e) {
            System.out.println(e);
            System.out.println("Error tratando de abrir HTML");
        }
    }
    
    private void btn_togActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_togActionPerformed
        // TODO add your handling code here:
        if(btn_tog.isSelected()){
            label_analyzer.setText("Analizador: StatPy");
            btn_tog.setText("StatPy");
        }else{
            label_analyzer.setText("Analizador: JSON ");
            btn_tog.setText("JSON");
        }
            
    }//GEN-LAST:event_btn_togActionPerformed
    
    private void ejecutar(String codigoFuente){
        
        try {
            Analizador_Lexico scan = new Analizador_Lexico(new java.io.StringReader(codigoFuente));
            analisis_sintactico parser = new analisis_sintactico(scan);
            parser.parse();
            
            
            //System.out.println(scan.tabla_tokens);
            reporte_tokens(scan.tabla_tokens);
            scan.tabla_tokens.clear();
            
            // Genera reporte de erroes lexicos en HTMl
            reporte_errores_lexicos(scan.TablaEL);
            scan.TablaEL.clear();
            System.out.println("pues analizo esta mierda");
        } catch (Exception ex) {
            Logger.getLogger(user_interface.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    Hashtable<String, LinkedList<Tokens>> json_map = new Hashtable<>();
    Hashtable<String, LinkedList<TError>> json_map_errores = new Hashtable<>();
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       
        //ejecutar("int test 5+80*90/70;");
        
        File archivo = new File("archivo.txt");
        PrintWriter escribir;
        
        try {    
            escribir = new PrintWriter(archivo);
            escribir.print(" " + text_entrada.getText());
            //System.out.println("Entrada: \n" + text_entrada.getText());
            escribir.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(user_interface.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        if (btn_tog.isSelected()) {
            Reader lector;
            try {

                lector = new BufferedReader(new FileReader("archivo.txt"));
                Analizador_Lexico lexer = new Analizador_Lexico(lector);        // inicio del analisis lexico
                analisis_sintactico parser = new analisis_sintactico(lexer);    
                parser.parse();                                                 // se parse la lsita de tokens
                //System.out.println(parser.python);

                for (String temp : parser.python) {                             // Se traduce a lenguaje python
                    text_salida.append(temp);
                }

                // Impresion de repotes lexicos html
                reporte_tokens(lexer.tabla_tokens);
                lexer.tabla_tokens.clear();

                // Genera reporte de erroes lexicos en HTMl
                reporte_errores_lexicos(lexer.TablaEL);
                lexer.TablaEL.clear();

            } catch (Exception e) {

                System.out.println("no lee esa mierda");
            }
        } else {
            Reader lector;
            try {

                lector = new BufferedReader(new FileReader("archivo.txt"));
                Analizador_json json_lexer = new Analizador_json(lector); // Se crea un objeto analizador json
                json_lexer.yylex();                                       // se analiza
               
                String [] jsonFileName = path_current_file.split("\\\\",0); // split array and get the last value
                json_map.put(jsonFileName[jsonFileName.length-1],(LinkedList)json_lexer.tabla_tokens.clone());  
                // se guarda ese analis en el hashtable con String "nombre archivo" y Linskelist<Tokens>"lista"
                // se crea una copia de la lista para que no se sobre escriba 
                json_map_errores.put(jsonFileName[jsonFileName.length-1],(LinkedList)json_lexer.TablaEL.clone());
                
                json_lexer.tabla_tokens.clear();    // Se resetea la lista guardada en el analizador lexico
                json_lexer.TablaEL.clear();
                reporte_tokens_json(json_map);       // Se genera el reporte de tokens HTML json
                
                reporte_errores_json(json_map_errores);
                
            } catch (Exception e) {
                System.out.println("no lee esa mierda");
            }
        }           
    }//GEN-LAST:event_jButton1ActionPerformed

    private void save_menuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_save_menuActionPerformed
        // TODO add your handling code here:
        save_general(path_current_file);
    }//GEN-LAST:event_save_menuActionPerformed

    private void save_as_menuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_save_as_menuActionPerformed
        // TODO add your handling code here:

        try {
            JFileChooser fileChooser = new JFileChooser();
            //  Seteando filtros del programa en especifico
            FileNameExtensionFilter filter = new FileNameExtensionFilter("Compi 1 archivos SP y JSON", "sp", "json");
            fileChooser.setFileFilter(filter);

            // Donde se abre por defecto 
            fileChooser.setCurrentDirectory(new File("."));

            // Enum del resultado, si es OK, o cancel o lo que presione el usuario
            int result = fileChooser.showOpenDialog(null);

            System.out.println("Result: " + result);

            if (result == JFileChooser.APPROVE_OPTION) {
                File selectedFile = new File(fileChooser.getSelectedFile().getAbsolutePath());
                System.out.println("ruta: " + selectedFile);
                 save_general(String.valueOf(selectedFile));
                 
                 path_current_file = String.valueOf(selectedFile);
                 System.out.println(path_current_file);

            } else if (result == JFileChooser.CANCEL_OPTION) {
                System.out.println("se cancelo el puerto :( ");
            }
        } catch (Exception e) {
            System.out.println(e);
            System.out.println("Error tratando de guardar el archivo como, file chooser");
        }
    }//GEN-LAST:event_save_as_menuActionPerformed

    private void html_errores_STATPYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_html_errores_STATPYActionPerformed
        // TODO add your handling code here:
        String ruta = "C:\\Users\\mathew\\Documents\\NetBeansProjects\\[OLC1]Proyecto1_201602755\\Tabla_errores_lexicos.html";
        abrir_html(ruta);
    }//GEN-LAST:event_html_errores_STATPYActionPerformed

    private void html_tokens_JSONActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_html_tokens_JSONActionPerformed
        // TODO add your handling code here:
        String ruta = "C:\\Users\\mathew\\Documents\\NetBeansProjects\\[OLC1]Proyecto1_201602755\\Tabla_de_tokens_json.html";
        abrir_html(ruta);
    }//GEN-LAST:event_html_tokens_JSONActionPerformed

    private void html_errores_JSONActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_html_errores_JSONActionPerformed
        // TODO add your handling code here:
        String ruta = "C:\\Users\\mathew\\Documents\\NetBeansProjects\\[OLC1]Proyecto1_201602755\\Tabla_de_errores_json.html";
        abrir_html(ruta);
    }//GEN-LAST:event_html_errores_JSONActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        DefaultPieDataset pieDataset = new DefaultPieDataset();
        pieDataset.setValue("One",      new Integer(10));
        pieDataset.setValue("two",      new Integer(20));
        pieDataset.setValue("there",    new Integer(30));
        pieDataset.setValue("four",     new Integer(40));
        
        JFreeChart chart = ChartFactory.createPieChart(" Pie Chart ", pieDataset,true, true, true);
        PiePlot P = (PiePlot)chart.getPlot();
        //P.setForegroundAlpha(TOP_ALIGNMENT);
        
        ChartFrame frame = new ChartFrame("Pie Chart", chart);
        frame.setVisible(true);
        frame.setSize(450,500);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void save_general(String path){
        try{
            FileWriter writer = new FileWriter(path);
            BufferedWriter bw = new BufferedWriter(writer);
            text_entrada.write(bw);
            bw.close();
            text_entrada.requestFocus();
            JOptionPane.showMessageDialog(this, "se guardo con exito: " + path);
            
        }catch (Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
    }
    
    public void reporte_tokens_json(Hashtable<String, LinkedList<Tokens>> lista){
        try{
            PrintWriter file_out;

            file_out =  new PrintWriter("Tabla_de_tokens_json.html");

            file_out.println(   "<!DOCTYPE html>\n" +
                                "<html>\n" +
                                "<head>\n" +
                                "  <title> Reporte de Tokens JSON </title>\n" +
                                "  <style>\n" +
                                "    body {\n" +
                                "      font-family: Arial, sans-serif;\n" +
                                "      margin: 0;\n" +
                                "      padding: 0;\n" +
                                "      background-color: #c4cef9;\n" +
                                "    }\n" +
                                "    \n" +
                                "    h2 {\n" +
                                "      text-align: center;\n" +
                                "      padding: 20px;\n" +
                                "      color: #000000;\n" +
                                "    }\n" +
                                "    \n" +
                                "    table {\n" +
                                "      border-collapse: collapse;\n" +
                                "      width: 80%;\n" +
                                "      margin: 20px auto;\n" +
                                "      background-color: #fff3e0;\n" +
                                "      border: 1px solid #e57373;\n" +
                                "      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\n" +
                                "    }\n" +
                                "    \n" +
                                "    th, td {\n" +
                                "      border: 1px solid #ffcdd2;\n" +
                                "      padding: 10px;\n" +
                                "      text-align: left;\n" +
                                "    }\n" +
                                "    \n" +
                                "    th {\n" +
                                "      background-color: #20B2AA;\n" +
                                "      color: #d84315;\n" +
                                "       text-align: center;\n" +
                                "    }\n" +
                                "    \n" +
                                "    tr:nth-child(even) {\n" +
                                "      background-color: #ffecb3;\n" +
                                "    }\n" +
                                "  </style>\n" +
                                "</head>\n" +
                                "<body>\n" +
                                "\n" +
                                "<h2> Reporte de Tokens JSON </h2>");
                    
                    //Table 
                    file_out.println("<table>\n");
                    /*
                    for (String key : lista.keySet() ) {
                        // nommbre del archivo
                        file_out.println(
                        "  <tr>\n" +
                        "  <th colspan=\"4\"> " + key + "</th>\n" +
                        "  </tr>\n" +
                        "  \n"
                        );
                        
                        // headers
                        file_out.println(   
                        "  <tr>\n" +
                        "    <th> Lexema </th>\n" +
                        "    <th> Descripcion </th>\n" +
                        "    <th> Linea </th>\n" +
                        "    <th> Columna </th>\n" +
                        "  </tr>\n" +
                        "  \n"
                        );
                        // Lista de tokens 
                        for(Tokens item: lista.get(key)){
                            file_out.println("  <tr>\n" +
                                            "    <td>" + item.getLexema()       + "</td>\n" +
                                            "    <td>" + item.getToken()        + "</td>\n" +
                                            "    <td>" + item.getLinea()        + "</td>\n" +
                                            "    <td>" + item.getColumna()      + "</td>\n" +
                                            "  </tr>\n"
                                        );
                        }
                    }*/
                    
                    
                    for (Map.Entry<String, LinkedList<Tokens>> entry : lista.entrySet()) {
                        // nommbre del archivo
                        file_out.println(
                        "  <tr>\n" +
                        "  <th colspan=\"4\"> " + entry.getKey() + "</th>\n" +
                        "  </tr>\n" +
                        "  \n"
                        );
                        
                        // headers
                        file_out.println(   
                        "  <tr>\n" +
                        "    <th> Lexema </th>\n" +
                        "    <th> Descripcion </th>\n" +
                        "    <th> Linea </th>\n" +
                        "    <th> Columna </th>\n" +
                        "  </tr>\n" +
                        "  \n"
                        );
                        // Lista de tokens 
                        for(Tokens item: entry.getValue()){
                            file_out.println("  <tr>\n" +
                                            "    <td>" + item.getLexema()       + "</td>\n" +
                                            "    <td>" + item.getToken()        + "</td>\n" +
                                            "    <td>" + item.getLinea()        + "</td>\n" +
                                            "    <td>" + item.getColumna()      + "</td>\n" +
                                            "  </tr>\n"
                                        );
                        }
                    }
                    
                    file_out.println(   "</table>\n" +
                                        "</body>\n" +
                                        "</html>");

            System.out.println("Generated html for JSON");

            file_out.close();
        }catch(FileNotFoundException e){
            System.out.println("not found");
        }
        
    }
    
     public void reporte_errores_json(Hashtable<String, LinkedList<TError>> lista){
        try{
            PrintWriter file_out;

            file_out =  new PrintWriter("Tabla_de_errores_json.html");

            file_out.println(   "<!DOCTYPE html>\n" +
                                "<html>\n" +
                                "<head>\n" +
                                "  <title> Reporte de Errores JSON </title>\n" +
                                "  <style>\n" +
                                "    body {\n" +
                                "      font-family: Arial, sans-serif;\n" +
                                "      margin: 0;\n" +
                                "      padding: 0;\n" +
                                "      background-color: #008B95;\n" +
                                "    }\n" +
                                "    \n" +
                                "    h2 {\n" +
                                "      text-align: center;\n" +
                                "      padding: 20px;\n" +
                                "      color: #FFFFFF;\n" +
                                "    }\n" +
                                "    \n" +
                                "    table {\n" +
                                "      border-collapse: collapse;\n" +
                                "      width: 80%;\n" +
                                "      margin: 20px auto;\n" +
                                "      background-color: #fff3e0;\n" +
                                "      border: 1px solid #e57373;\n" +
                                "      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\n" +
                                "    }\n" +
                                "    \n" +
                                "    th, td {\n" +
                                "      border: 1px solid #ffcdd2;\n" +
                                "      padding: 10px;\n" +
                                "      text-align: left;\n" +
                                "    }\n" +
                                "    \n" +
                                "    th {\n" +
                                "      background-color: #ffcc80;\n" +
                                "      color: #d84315;\n" +
                                "      text-align: center;\n" +
                                "    }\n" +
                                "    \n" +
                                "    tr:nth-child(even) {\n" +
                                "      background-color: #ffecb3;\n" +
                                "    }\n" +
                                "  </style>\n" +
                                "</head>\n" +
                                "<body>\n" +
                                "\n" +
                                "<h2> Reporte de Errores JSON </h2>");
                    
                    //Table 
                    file_out.println("<table>\n");
                    
                    // Recorriendo hashtable para escribirlo en el HTML
                    for (Map.Entry<String, LinkedList<TError>> entry : lista.entrySet()) {
                        // nommbre del archivo
                        file_out.println(
                        "  <tr>\n" +
                        "  <th colspan=\"4\"> " + entry.getKey() + "</th>\n" +
                        "  </tr>\n" +
                        "  \n"
                        );
                        
                        // headers
                        file_out.println(   
                        "  <tr>\n" +
                        "    <th> Lexema </th>\n" +
                        "    <th> Descripcion </th>\n" +
                        "    <th> Linea </th>\n" +
                        "    <th> Columna </th>\n" +
                        "  </tr>\n" +
                        "  \n"
                        );
                        // Lista de tokens 
                        for(TError item: entry.getValue()){
                            file_out.println("  <tr>\n" +
                                            "    <td>" + item.getLexema()       + "</td>\n" +
                                            "    <td>" + item.getDescripcion()  + "</td>\n" +
                                            "    <td>" + item.getLinea()        + "</td>\n" +
                                            "    <td>" + item.getColumna()      + "</td>\n" +
                                            "  </tr>\n"
                                        );
                        }
                    }
                    
                    file_out.println(   "</table>\n" +
                                        "</body>\n" +
                                        "</html>");

            System.out.println("Generated html for JSON");

            file_out.close();
        }catch(FileNotFoundException e){
            System.out.println("not found");
        }
        
    }
    
    public void reporte_tokens(LinkedList<Tokens> tabla_tokens){
        try{
            PrintWriter file_out;

            file_out =  new PrintWriter("Tabla_de_tokens.html");

            file_out.println(   "<!DOCTYPE html>\n" +
                                "<html>\n" +
                                "<head>\n" +
                                "  <title> Reporte de Tokens STATPY </title>\n" +
                                "  <style>\n" +
                                "    body {\n" +
                                "      font-family: Arial, sans-serif;\n" +
                                "      margin: 0;\n" +
                                "      padding: 0;\n" +
                                "      background-color: #c4cef9;\n" +
                                "    }\n" +
                                "    \n" +
                                "    h2 {\n" +
                                "      text-align: center;\n" +
                                "      padding: 20px;\n" +
                                "      color: #000000;\n" +
                                "    }\n" +
                                "    \n" +
                                "    table {\n" +
                                "      border-collapse: collapse;\n" +
                                "      width: 80%;\n" +
                                "      margin: 20px auto;\n" +
                                "      background-color: #fff3e0;\n" +
                                "      border: 1px solid #e57373;\n" +
                                "      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\n" +
                                "    }\n" +
                                "    \n" +
                                "    th, td {\n" +
                                "      border: 1px solid #ffcdd2;\n" +
                                "      padding: 10px;\n" +
                                "      text-align: left;\n" +
                                "    }\n" +
                                "    \n" +
                                "    th {\n" +
                                "      background-color: #ffcc80;\n" +
                                "      color: #d84315;\n" +
                                "    }\n" +
                                "    \n" +
                                "    tr:nth-child(even) {\n" +
                                "      background-color: #ffecb3;\n" +
                                "    }\n" +
                                "  </style>\n" +
                                "</head>\n" +
                                "<body>\n" +
                                "\n" +
                                "<h2> Reporte de Tokens </h2>");
           
                    //Table 
                    file_out.println(   "<table>\n" +
                                        "  <tr>\n" +
                                        "    <th> Lexema </th>\n" +
                                        "    <th> Descripcion </th>\n" +
                                        "    <th> Linea </th>\n" +
                                        "    <th> Columna </th>\n" +
                                        "  </tr>\n" +
                                        "  \n"
                                        );
                    
                    for(Tokens item: tabla_tokens){
                        file_out.println("  <tr>\n" +
                                        "    <td>" + item.getLexema()       + "</td>\n" +
                                        "    <td>" + item.getToken()        + "</td>\n" +
                                        "    <td>" + item.getLinea()        + "</td>\n" +
                                        "    <td>" + item.getColumna()      + "</td>\n" +
                                        "  </tr>\n"
                                    );
                    }
                    
                    file_out.println(   "</table>\n" +
                                        "</body>\n" +
                                        "</html>");

            System.out.println("Generated html table for Tokens");

            file_out.close();
        }catch(FileNotFoundException e){
            System.out.println("not found");
        }
        
    }
    
    public void reporte_errores_lexicos(LinkedList<TError> TablaEL){
        try{
            PrintWriter file_out;

            file_out =  new PrintWriter("Tabla_errores_lexicos.html");

            file_out.println(   "<!DOCTYPE html>\n" +
                                "<html>\n" +
                                "<head>\n" +
                                "  <title>Reporte de Errores STATPY </title>\n" +
                                "  <style>\n" +
                                "    body {\n" +
                                "      font-family: Arial, sans-serif;\n" +
                                "      margin: 0;\n" +
                                "      padding: 0;\n" +
                                "      background-color: #008B95;\n" +
                                "    }\n" +
                                "    \n" +
                                "    h2 {\n" +
                                "      text-align: center;\n" +
                                "      padding: 20px;\n" +
                                "      color: #FFFFFF;\n" +
                                "    }\n" +
                                "    \n" +
                                "    table {\n" +
                                "      border-collapse: collapse;\n" +
                                "      width: 80%;\n" +
                                "      margin: 20px auto;\n" +
                                "      background-color: #fff3e0;\n" +
                                "      border: 1px solid #e57373;\n" +
                                "      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\n" +
                                "    }\n" +
                                "    \n" +
                                "    th, td {\n" +
                                "      border: 1px solid #ffcdd2;\n" +
                                "      padding: 10px;\n" +
                                "      text-align: left;\n" +
                                "    }\n" +
                                "    \n" +
                                "    th {\n" +
                                "      background-color: #ffcc80;\n" +
                                "      color: #d84315;\n" +
                                "    }\n" +
                                "    \n" +
                                "    tr:nth-child(even) {\n" +
                                "      background-color: #ffecb3;\n" +
                                "    }\n" +
                                "  </style>\n" +
                                "</head>\n" +
                                "<body>\n" +
                                "\n" +
                                "<h2> Tabla de errores Lexicos </h2>");
           
                    //Table 
                    file_out.println(   "<table>\n" +
                                        "  <tr>\n" +
                                        "    <th> Lexema </th>\n" +
                                        "    <th> Descripcion </th>\n" +
                                        "    <th> Linea </th>\n" +
                                        "    <th> Columna </th>\n" +
                                        "  </tr>\n" +
                                        "  \n"
                                        );
                    
                    for(TError item: TablaEL){
                        file_out.println("  <tr>\n" +
                                        "    <td>" + item.getLexema()       + "</td>\n" +
                                        "    <td>" + item.getDescripcion()  + "</td>\n" +
                                        "    <td>" + item.getLinea()        + "</td>\n" +
                                        "    <td>" + item.getColumna()      + "</td>\n" +
                                        "  </tr>\n"
                                    );
                    }
                    
                    file_out.println(   "</table>\n" +
                                        "</body>\n" +
                                        "</html>");

            System.out.println("Generated html table for errores lexicos");

            file_out.close();
        }catch(FileNotFoundException e){
            System.out.println("not found");
        }
        
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(user_interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(user_interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(user_interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(user_interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new user_interface().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton btn_tog;
    private javax.swing.JMenuItem html_errores_JSON;
    private javax.swing.JMenuItem html_errores_STATPY;
    private javax.swing.JMenuItem html_tokens_JSON;
    private javax.swing.JMenuItem html_tokens_STATPY;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel label_analyzer;
    private javax.swing.JMenuItem open_file_menu;
    private javax.swing.JMenuItem save_as_menu;
    private javax.swing.JMenuItem save_menu;
    private javax.swing.JTextPane text_entrada;
    private javax.swing.JTextArea text_salida;
    // End of variables declaration//GEN-END:variables
}
